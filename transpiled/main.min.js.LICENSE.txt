/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
      export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/*                                 */

/*                             */

/*                            */

/*                          */

/*                        */

/*                       */

/*                      */

/*                     */

/*                    */

/*                   */

/*                  */

/*                 */

/*                */

/*               */

/*             */

/*            */

/*           */

/*          */

/*         */

/*       */

/*      */

/*     */

/*    */

/*   */

/*  */

/* */

/* ::<number | string, string, string, string> */

/* ::<number | string, string, string> */

/* Z+1 */

/* binding */

/* eslint-disable */

/* eslint-disable import/no-unresolved */

/* eslint-disable key-spacing */

/* eslint-disable max-len */

/* eslint-disable no-empty */

/* eslint-disable no-new */

/* eslint-disable no-unused-expressions */

/* eslint-disable no-unused-vars */

/* eslint-disable no-var */

/* eslint-disable react-internal/no-production-logging */

/* eslint-enable */

/* eslint-enable key-spacing */

/* eslint-enable no-console */

/* eslint-enable no-empty */

/* falls through */

/* global Symbol */

/* globals MSApp */

/* harmony default export */

/* harmony export */

/* harmony import */

/* istanbul ignore next */

/* n */

/* o */

/* reexport safe */

/* webpack/runtime/compat get default export */

/*! ../../../styles/mixin */

/*! ../../parts/buttons/asyncButton */

/*! ../../parts/buttons/buttons */

/*! ../../parts/buttons/popButtons */

/*! ../../parts/checkboxes/checkBoxes */

/*! ../../parts/loadings/loadingPlate */

/*! ../../parts/loadings/loadings */

/*! ../../parts/radioSelectors/radioSelector */

/*! ../../parts/radioboxes/radioButtons */

/*! ../../parts/selectors/selector */

/*! ../../parts/textBoxes/popText */

/*! ../../parts/textBoxes/textForms */

/*! ../../redux/actions/modeActions */

/*! ../../styles/containers */

/*! ../commonParts/elmList */

/*! ../commonParts/formBox */

/*! ../components/Context */

/*! ../components/connectAdvanced */

/*! ../components/header/header */

/*! ../components/main/main */

/*! ../components/sideNav/sideNav */

/*! ../parts/radioboxes/radioButtons */

/*! ../radioboxes/radioBoxes */

/*! ../reducer/formMode */

/*! ../styles/containers */

/*! ../utils/Subscription */

/*! ../utils/bindActionCreators */

/*! ../utils/shallowEqual */

/*! ../utils/useIsomorphicLayoutEffect */

/*! ../utils/verifyPlainObject */

/*! ../utils/warning */

/*! ./Context */

/*! ./arrayLikeToArray.js */

/*! ./arrayWithHoles.js */

/*! ./arrayWithoutHoles.js */

/*! ./batch */

/*! ./buttons/buttonList */

/*! ./checkPropTypes */

/*! ./checkboxes/checkBoxList */

/*! ./cjs/react-dom.development.js */

/*! ./cjs/react-is.development.js */

/*! ./cjs/react.development.js */

/*! ./cjs/scheduler-tracing.development.js */

/*! ./cjs/scheduler.development.js */

/*! ./components/Context */

/*! ./components/Provider */

/*! ./components/connectAdvanced */

/*! ./connect/connect */

/*! ./construct.js */

/*! ./defineProperty.js */

/*! ./factoryWithTypeCheckers */

/*! ./getPrototypeOf.js */

/*! ./hooks/useDispatch */

/*! ./hooks/useSelector */

/*! ./hooks/useStore */

/*! ./isNativeFunction.js */

/*! ./isNativeReflectConstruct.js */

/*! ./isPlainObject */

/*! ./iterableToArray.js */

/*! ./iterableToArrayLimit.js */

/*! ./lib/ReactPropTypesSecret */

/*! ./loadings/loadingList */

/*! ./mapDispatchToProps */

/*! ./mapStateToProps */

/*! ./mergeProps */

/*! ./nonIterableRest.js */

/*! ./nonIterableSpread.js */

/*! ./pages/layout */

/*! ./radioboxes/radioBoxes */

/*! ./redux/store/store */

/*! ./selectorFactory */

/*! ./selectorRadio/selectorList */

/*! ./selectors/selectorsBox */

/*! ./setPrototypeOf.js */

/*! ./textBoxes/textBoxes */

/*! ./unsupportedIterableToArray.js */

/*! ./useReduxContext */

/*! ./useStore */

/*! ./utils/batch */

/*! ./utils/reactBatchedUpdates */

/*! ./utils/shallowEqual */

/*! ./verifySubselectors */

/*! ./warning */

/*! ./wrapMapToProps */

/*! @babel/runtime/helpers/asyncToGenerator */

/*! @babel/runtime/helpers/classCallCheck */

/*! @babel/runtime/helpers/createClass */

/*! @babel/runtime/helpers/defineProperty */

/*! @babel/runtime/helpers/esm/assertThisInitialized */

/*! @babel/runtime/helpers/esm/extends */

/*! @babel/runtime/helpers/esm/inheritsLoose */

/*! @babel/runtime/helpers/esm/objectSpread2 */

/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */

/*! @babel/runtime/helpers/esm/taggedTemplateLiteralLoose */

/*! @babel/runtime/helpers/esm/wrapNativeSuper */

/*! @babel/runtime/helpers/slicedToArray */

/*! @babel/runtime/helpers/taggedTemplateLiteral */

/*! @babel/runtime/helpers/toConsumableArray */

/*! @babel/runtime/regenerator */

/*! @emotion/is-prop-valid */

/*! @emotion/memoize */

/*! @emotion/stylis */

/*! @emotion/unitless */

/*! hoist-non-react-statics */

/*! object-assign */

/*! polished */

/*! prop-types */

/*! react */

/*! react-dom */

/*! react-is */

/*! react-redux */

/*! redux */

/*! regenerator-runtime */

/*! scheduler */

/*! scheduler/tracing */

/*! shallowequal */

/*! styled-components */

/*!******************!*\
  !*** ./main.tsx ***!
  \******************/

/*!**************************!*\
  !*** ./pages/layout.tsx ***!
  \**************************/

/*!**************************!*\
  !*** ./styles/mixin.tsx ***!
  \**************************/

/*!******************************!*\
  !*** ./redux/store/store.ts ***!
  \******************************/

/*!*******************************!*\
  !*** ./styles/containers.tsx ***!
  \*******************************/

/*!**********************************!*\
  !*** ./components/main/main.tsx ***!
  \**********************************/

/*!***********************************!*\
  !*** ./redux/reducer/formMode.ts ***!
  \***********************************/

/*!**************************************!*\
  !*** ./components/header/header.tsx ***!
  \**************************************/

/*!**************************************!*\
  !*** ./redux/actions/modeActions.ts ***!
  \**************************************/

/*!****************************************!*\
  !*** ./components/sideNav/sideNav.tsx ***!
  \****************************************/

/*!*****************************************!*\
  !*** ../../node_modules/react/index.js ***!
  \*****************************************/

/*!********************************************!*\
  !*** ../../node_modules/react-is/index.js ***!
  \********************************************/

/*!********************************************!*\
  !*** ../../node_modules/redux/es/redux.js ***!
  \********************************************/

/*!*********************************************!*\
  !*** ../../node_modules/react-dom/index.js ***!
  \*********************************************/

/*!*********************************************!*\
  !*** ../../node_modules/scheduler/index.js ***!
  \*********************************************/

/*!**********************************************!*\
  !*** ../../node_modules/prop-types/index.js ***!
  \**********************************************/

/*!**********************************************!*\
  !*** ./components/parts/buttons/buttons.tsx ***!
  \**********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/scheduler/tracing.js ***!
  \***********************************************/

/*!************************************************!*\
  !*** ../../node_modules/shallowequal/index.js ***!
  \************************************************/

/*!************************************************!*\
  !*** ./components/main/buttons/buttonList.tsx ***!
  \************************************************/

/*!************************************************!*\
  !*** ./components/parts/loadings/loadings.tsx ***!
  \************************************************/

/*!************************************************!*\
  !*** ./components/parts/textBoxes/popText.tsx ***!
  \************************************************/

/*!*************************************************!*\
  !*** ../../node_modules/object-assign/index.js ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ./components/main/commonParts/elmList.tsx ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ./components/main/commonParts/formBox.tsx ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ./components/main/textBoxes/textBoxes.tsx ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ./components/parts/buttons/popButtons.tsx ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ./components/parts/selectors/selector.tsx ***!
  \*************************************************/

/*!**************************************************!*\
  !*** ../../node_modules/react-redux/es/index.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ./components/main/loadings/loadingList.tsx ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ./components/parts/buttons/asyncButton.tsx ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ./components/parts/textBoxes/textForms.tsx ***!
  \**************************************************/

/*!***************************************************!*\
  !*** ./components/main/radioboxes/radioBoxes.tsx ***!
  \***************************************************/

/*!****************************************************!*\
  !*** ./components/main/selectors/selectorsBox.tsx ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ./components/parts/checkboxes/checkBoxes.tsx ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ./components/parts/loadings/loadingPlate.tsx ***!
  \****************************************************/

/*!*****************************************************!*\
  !*** ./components/main/checkboxes/checkBoxList.tsx ***!
  \*****************************************************/

/*!******************************************************!*\
  !*** ./components/parts/radioboxes/radioButtons.tsx ***!
  \******************************************************/

/*!*******************************************************!*\
  !*** ../../node_modules/prop-types/checkPropTypes.js ***!
  \*******************************************************/

/*!********************************************************!*\
  !*** ../../node_modules/polished/dist/polished.esm.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/batch.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ./components/main/selectorRadio/selectorList.tsx ***!
  \********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/react/cjs/react.development.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************/

/*!**********************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/warning.js ***!
  \**********************************************************/

/*!***********************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useStore.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ./components/parts/radioSelectors/radioSelector.tsx ***!
  \***********************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/connect.js ***!
  \************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/@babel/runtime/regenerator/index.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useDispatch.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useSelector.js ***!
  \**************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-is/cjs/react-is.development.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/components/Context.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/mergeProps.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/Subscription.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/shallowEqual.js ***!
  \***************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/react-redux/es/components/Provider.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/isPlainObject.js ***!
  \****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/react-dom/cjs/react-dom.development.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/scheduler/cjs/scheduler.development.js ***!
  \*****************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/construct.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useReduxContext.js ***!
  \******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \*******************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/selectorFactory.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/@emotion/stylis/dist/stylis.browser.esm.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/bindActionCreators.js ***!
  \*********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/objectSpread2.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/reactBatchedUpdates.js ***!
  \**********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@emotion/memoize/dist/memoize.browser.esm.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-redux/es/components/connectAdvanced.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \***********************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js ***!
  \************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/@emotion/unitless/dist/unitless.browser.esm.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \**************************************************************************/

/*!****************************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js ***!
  \****************************************************************************/

/*!*****************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
  \*****************************************************************************/

/*!******************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \******************************************************************************/

/*!******************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js ***!
  \******************************************************************************/

/*!*********************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js ***!
  \*********************************************************************************/

/*!**********************************************************************************!*\
  !*** ../../node_modules/styled-components/dist/styled-components.browser.esm.js ***!
  \**********************************************************************************/

/*!***********************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js ***!
  \***********************************************************************************/

/*!***********************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \***********************************************************************************/

/*!***********************************************************************************!*\
  !*** ../../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js ***!
  \***********************************************************************************/

/*!*************************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*************************************************************************************/

/*!**************************************************************************************!*\
  !*** ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**************************************************************************************/

/*#__PURE__*/

/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */

/**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */

/**
   * @internal
   * @type {ReactComponent}
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */

/**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

/**
   * Returns whether
   */

/**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */

/**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

/**
   * Warns if there is a duplicate or missing key
   */

/**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */

/**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

/**
 * @return {?object} A SyntheticCompositionEvent.
 */

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

/**
 * A helper to generate a retina background image and non-retina
 * background image. The retina background image will output to a HiDPI media query. The mixin uses
 * a _2x.png filename suffix by default.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *  ...retinaImage('my-img')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${retinaImage('my-img')}
 * `
 *
 * // CSS as JS Output
 * div {
 *   backgroundImage: 'url(my-img.png)',
 *   '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),
 *    only screen and (min--moz-device-pixel-ratio: 1.3),
 *    only screen and (-o-min-device-pixel-ratio: 1.3/1),
 *    only screen and (min-resolution: 144dpi),
 *    only screen and (min-resolution: 1.5dppx)': {
 *     backgroundImage: 'url(my-img_2x.png)',
 *   }
 * }
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A list of event names to a configurable list of vendor prefixes.
 */

/**
 * Accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same transition values to (second parameter).
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),
 *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};
 *   ${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'
 *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',
 * }
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */

/**
 * Base class helpers for the updating state of a component.
 */

/**
 * Bootstrap if a DOM exists.
 */

/**
 * CSS for a @font-face declaration. Defaults to check for local copies of the font on the user's machine. You can disable this by passing `null` to localFonts.
 *
 * @example
 * // Styles as object basic usage
 * const styles = {
 *    ...fontFace({
 *      'fontFamily': 'Sans-Pro',
 *      'fontFilePath': 'path/to/file'
 *    })
 * }
 *
 * // styled-components basic usage
 * const GlobalStyle = createGlobalStyle`${
 *   fontFace({
 *     'fontFamily': 'Sans-Pro',
 *     'fontFilePath': 'path/to/file'
 *   }
 * )}`
 *
 * // CSS as JS Output
 *
 * '@font-face': {
 *   'fontFamily': 'Sans-Pro',
 *   'src': 'url("path/to/file.eot"), url("path/to/file.woff2"), url("path/to/file.woff"), url("path/to/file.ttf"), url("path/to/file.svg")',
 * }
 */

/**
 * CSS for declaring a linear gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...linearGradient({
        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
        toDirection: 'to top right',
        fallback: '#FFF',
      })
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${linearGradient({
        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
        toDirection: 'to top right',
        fallback: '#FFF',
      })}
 *`
 *
 * // CSS as JS Output
 *
 * div: {
 *   'backgroundColor': '#FFF',
 *   'backgroundImage': 'linear-gradient(to top right, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',
 * }
 */

/**
 * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...radialGradient({
 *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
 *     extent: 'farthest-corner at 45px 45px',
 *     position: 'center',
 *     shape: 'ellipse',
 *   })
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${radialGradient({
 *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
 *     extent: 'farthest-corner at 45px 45px',
 *     position: 'center',
 *     shape: 'ellipse',
 *   })}
 *`
 *
 * // CSS as JS Output
 *
 * div: {
 *   'backgroundColor': '#00FFFF',
 *   'backgroundImage': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',
 * }
 */

/**
 * CSS to contain a float (credit to CSSMojo).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *    ...clearFix(),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${clearFix()}
 * `
 *
 * // CSS as JS Output
 *
 * '&::after': {
 *   'clear': 'both',
 *   'content': '""',
 *   'display': 'table'
 * }
 */

/**
 * CSS to fully cover an area. Can optionally be passed an offset to act as a "padding".
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...cover()
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${cover()}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   'position': 'absolute',
 *   'top': '0',
 *   'right: '0',
 *   'bottom': '0',
 *   'left: '0'
 * }
 */

/**
 * CSS to hide content visually but remain accessible to screen readers.
 * from [HTML5 Boilerplate](https://github.com/h5bp/html5-boilerplate/blob/9a176f57af1cfe8ec70300da4621fb9b07e5fa31/src/css/main.css#L121)
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...hideVisually(),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${hideVisually()};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'border': '0',
 *   'clip': 'rect(0 0 0 0)',
 *   'height': '1px',
 *   'margin': '-1px',
 *   'overflow': 'hidden',
 *   'padding': '0',
 *   'position': 'absolute',
 *   'whiteSpace': 'nowrap',
 *   'width': '1px',
 * }
 */

/**
 * CSS to hide text to show a background image in a SEO-friendly way.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'backgroundImage': 'url(logo.png)',
 *   ...hideText(),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   backgroundImage: url(logo.png);
 *   ${hideText()};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'backgroundImage': 'url(logo.png)',
 *   'textIndent': '101%',
 *   'overflow': 'hidden',
 *   'whiteSpace': 'nowrap',
 * }
 */

/**
 * CSS to normalize abnormalities across browsers (normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css)
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *    ...normalize(),
 * }
 *
 * // styled-components usage
 * const GlobalStyle = createGlobalStyle`${normalize()}`
 *
 * // CSS as JS Output
 *
 * html {
 *   lineHeight: 1.15,
 *   textSizeAdjust: 100%,
 * } ...
 */

/**
 * CSS to represent triangle with any pointing direction with an optional background color.
 *
 * @example
 * // Styles as object usage
 *
 * const styles = {
 *   ...triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })
 * }
 *
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })}
 *
 *
 * // CSS as JS Output
 *
 * div: {
 *  'borderColor': 'transparent transparent transparent red',
 *  'borderStyle': 'solid',
 *  'borderWidth': '50px 0 50px 100px',
 *  'height': '0',
 *  'width': '0',
 * }
 */

/**
 * CSS to represent truncated text with an ellipsis. You can optionally pass a max-width and number of lines before truncating.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...ellipsis('250px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${ellipsis('250px')}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   'display': 'inline-block',
 *   'maxWidth': '250px',
 *   'overflow': 'hidden',
 *   'textOverflow': 'ellipsis',
 *   'whiteSpace': 'nowrap',
 *   'wordWrap': 'normal'
 * }
 */

/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Changes the hue of the color. Hue is a number between 0 to 360. The first
 * argument for adjustHue is the amount of degrees the color is rotated around
 * the color wheel, always producing a positive hue value.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: adjustHue(180, '#448'),
 *   background: adjustHue('180', 'rgba(101,100,205,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${adjustHue(180, '#448')};
 *   background: ${adjustHue('180', 'rgba(101,100,205,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#888844";
 *   background: "rgba(136,136,68,0.7)";
 * }
 */

/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */

/**
 * Check if a string ends with something
 * @private
 */

/**
 * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
 * @private
 */

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Convenience component with default shallow equality check for sCU.
 */

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

/**
 * Convert pixel value to ems. The default base value is 16px, but can be changed by passing a
 * second argument to the function.
 * @function
 * @param {string|number} pxval
 * @param {string|number} [base='16px']
 * @example
 * // Styles as object usage
 * const styles = {
 *   'height': em('16px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   height: ${em('16px')}
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'height': '1em'
 * }
 */

/**
 * Convert pixel value to rems. The default base value is 16px, but can be changed by passing a
 * second argument to the function.
 * @function
 * @param {string|number} pxval
 * @param {string|number} [base='16px']
 * @example
 * // Styles as object usage
 * const styles = {
 *   'height': rem('16px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   height: ${rem('16px')}
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'height': '1rem'
 * }
 */

/**
 * Convert rem values to px. By default, the base value is pulled from the font-size property on the root element (if it is set in % or px). It defaults to 16px if not found on the root. You can also override the base value by providing your own base in % or px.
 * @example
 * // Styles as object usage
 * const styles = {
 *   'height': remToPx('1.6rem')
 *   'height': remToPx('1.6rem', '10px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   height: ${remToPx('1.6rem')}
 *   height: ${remToPx('1.6rem', '10px')}
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'height': '25.6px',
 *   'height': '16px',
 * }
 */

/**
 * Converts a HslColor or HslaColor object to a color string.
 * This util is useful in case you only know on runtime which color object is
 * used. Otherwise we recommend to rely on `hsl` or `hsla`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 }),
 *   background: hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 })};
 *   background: ${hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#00f";
 *   background: "rgba(179,25,25,0.72)";
 * }
 */

/**
 * Converts a RgbColor or RgbaColor object to a color string.
 * This util is useful in case you only know on runtime which color object is
 * used. Otherwise we recommend to rely on `rgb` or `rgba`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgbToColorString({ red: 255, green: 205, blue: 100 }),
 *   background: rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100 })};
 *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#ffcd64";
 *   background: "rgba(255,205,100,0.72)";
 * }
 */

/**
 * Converts a RgbColor, RgbaColor, HslColor or HslaColor object to a color string.
 * This util is useful in case you only know on runtime which color object is
 * used. Otherwise we recommend to rely on `rgb`, `rgba`, `hsl` or `hsla`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: toColorString({ red: 255, green: 205, blue: 100 }),
 *   background: toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),
 *   background: toColorString({ hue: 240, saturation: 1, lightness: 0.5 }),
 *   background: toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${toColorString({ red: 255, green: 205, blue: 100 })};
 *   background: ${toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};
 *   background: ${toColorString({ hue: 240, saturation: 1, lightness: 0.5 })};
 *   background: ${toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#ffcd64";
 *   background: "rgba(255,205,100,0.72)";
 *   background: "#00f";
 *   background: "rgba(179,25,25,0.72)";
 * }
 */

/**
 * Converts the color to a grayscale, by reducing its saturation to 0.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: grayscale('#CCCD64'),
 *   background: grayscale('rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${grayscale('#CCCD64')};
 *   background: ${grayscale('rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#999";
 *   background: "rgba(153,153,153,0.7)";
 * }
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 * @private
 */

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Decreases the intensity of a color. Its range is between 0 to 1. The first
 * argument of the desaturate function is the amount by how much the color
 * intensity should be decreased.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: desaturate(0.2, '#CCCD64'),
 *   background: desaturate('0.2', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${desaturate(0.2, '#CCCD64')};
 *   background: ${desaturate('0.2', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#b8b979";
 *   background: "rgba(184,185,121,0.7)";
 * }
 */

/**
 * Decreases the opacity of a color. Its range for the amount is between 0 to 1.
 *
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: transparentize(0.1, '#fff');
 *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),
 *   background: transparentize('0.5', 'rgba(255, 0, 0, 0.8)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${transparentize(0.1, '#fff')};
 *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},
 *   background: ${transparentize('0.5', 'rgba(255, 0, 0, 0.8)')},
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(255,255,255,0.9)";
 *   background: "rgba(255,255,255,0.8)";
 *   background: "rgba(255,0,0,0.3)";
 * }
 */

/**
 * Determines which contrast guidelines have been met for two colors.
 * Based on the [contrast calculations recommended by W3](https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html).
 *
 * @example
 * const scores = meetsContrastGuidelines('#444', '#fff');
 */

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */

/**
 * Does our fallback mode think that this event is the end of composition?
 */

/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

/**
 * Enables shorthand for direction-based properties. It accepts a property (hyphenated or camelCased) and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can also optionally pass a null argument for a directional value to ignore it.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...directionalProperty('padding', '12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${directionalProperty('padding', '12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'paddingTop': '12px',
 *   'paddingRight': '24px',
 *   'paddingBottom': '36px',
 *   'paddingLeft': '48px'
 * }
 */

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

/**
 * Establish consistent measurements and spacial relationships throughout your projects by incrementing an em or rem value up or down a defined scale. We provide a list of commonly used scales as pre-defined variables.
 * @example
 * // Styles as object usage
 * const styles = {
 *    // Increment two steps up the default scale
 *   'fontSize': modularScale(2)
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *    // Increment two steps up the default scale
 *   fontSize: ${modularScale(2)}
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'fontSize': '1.77689em'
 * }
 */

/**
 * Event names that have already been detected and prefixed (if applicable).
 */

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */

/**
 * Factory function that creates pixel-to-x converters
 * @private
 */

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */

/**
 * Fetches the value of a passed CSS Variable in the :root scope, or otherwise returns a defaultValue if provided.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'background': cssVar('--background-color'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${cssVar('--background-color')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'background': 'red'
 * }
 */

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */

/**
 * For IE shims
 */

/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */

/**
 * Function helper that adds an array of states to a template of selectors. Used in textInputs and buttons.
 * @private
 */

/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

/**
 * Generates a media query to target HiDPI devices.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *  [hiDPI(1.5)]: {
 *    width: 200px;
 *  }
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${hiDPI(1.5)} {
 *     width: 200px;
 *   }
 * `
 *
 * // CSS as JS Output
 *
 * '@media only screen and (-webkit-min-device-pixel-ratio: 1.5),
 *  only screen and (min--moz-device-pixel-ratio: 1.5),
 *  only screen and (-o-min-device-pixel-ratio: 1.5/1),
 *  only screen and (min-resolution: 144dpi),
 *  only screen and (min-resolution: 1.5dppx)': {
 *   'width': '200px',
 * }
 */

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

/**
 * Get document associated with the event target.
 */

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */

/**
 * Helper for doing math with CSS Units. Accepts a formula as a string. All values in the formula must have the same unit (or be unitless). Supports complex formulas utliziing addition, subtraction, multiplication, division, square root, powers, factorial, min, max, as well as parentheses for order of operation.
 *
 *In cases where you need to do calculations with mixed units where one unit is a [relative length unit](https://developer.mozilla.org/en-US/docs/Web/CSS/length#Relative_length_units), you will want to use [CSS Calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc).
 *
 * *warning* While we've done everything possible to ensure math safely evalutes formulas expressed as strings, you should always use extreme caution when passing `math` user provided values.
 * @example
 * // Styles as object usage
 * const styles = {
 *   fontSize: math('12rem + 8rem'),
 *   fontSize: math('(12px + 2px) * 3'),
 *   fontSize: math('3px^2 + sqrt(4)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   fontSize: ${math('12rem + 8rem')};
 *   fontSize: ${math('(12px + 2px) * 3')};
 *   fontSize: ${math('3px^2 + sqrt(4)')};
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   fontSize: '20rem',
 *   fontSize: '42px',
 *   fontSize: '11px',
 * }
 */

/**
 * Helper for targeting rules in a style block generated by polished modules that need !important-level specificity. Can optionally specify a rule (or rules) to target specific rules.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...important(cover())
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${important(cover())}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   'position': 'absolute !important',
 *   'top': '0 !important',
 *   'right: '0 !important',
 *   'bottom': '0 !important',
 *   'left: '0 !important'
 * }
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

/**
 * Increases the intensity of a color. Its range is between 0 to 1. The first
 * argument of the saturate function is the amount by how much the color
 * intensity should be increased.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: saturate(0.2, '#CCCD64'),
 *   background: saturate('0.2', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${saturate(0.2, '#FFCD64')};
 *   background: ${saturate('0.2', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#e0e250";
 *   background: "rgba(224,226,80,0.7)";
 * }
 */

/**
 * Increases the opacity of a color. Its range for the amount is between 0 to 1.
 *
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: opacify(0.1, 'rgba(255, 255, 255, 0.9)');
 *   background: opacify(0.2, 'hsla(0, 0%, 100%, 0.5)'),
 *   background: opacify('0.5', 'rgba(255, 0, 0, 0.2)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${opacify(0.1, 'rgba(255, 255, 255, 0.9)')};
 *   background: ${opacify(0.2, 'hsla(0, 0%, 100%, 0.5)')},
 *   background: ${opacify('0.5', 'rgba(255, 0, 0, 0.2)')},
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#fff";
 *   background: "rgba(255,255,255,0.7)";
 *   background: "rgba(255,0,0,0.7)";
 * }
 */

/**
 * Inverts the red, green and blue values of a color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: invert('#CCCD64'),
 *   background: invert('rgba(101,100,205,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${invert('#CCCD64')};
 *   background: ${invert('rgba(101,100,205,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#33329b";
 *   background: "rgba(154,155,50,0.7)";
 * }
 */

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */

/**
 * Keeps track of the current dispatcher.
 */

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */

/**
 * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: mix(0.5, '#f00', '#00f')
 *   background: mix(0.25, '#f00', '#00f')
 *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${mix(0.5, '#f00', '#00f')};
 *   background: ${mix(0.25, '#f00', '#00f')};
 *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#7f007f";
 *   background: "#3f00bf";
 *   background: "rgba(63, 0, 191, 0.75)";
 * }
 */

/**
 * Operations for dealing with CSS properties.
 */

/**
 * Parse errors.md and turn it into a simple hash of code: message
 * @private
 */

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */

/**
 * Populates selectors that target all buttons. You can pass optional states to append to the selectors.
 * @example
 * // Styles as object usage
 * const styles = {
 *   [buttons('active')]: {
 *     'border': 'none'
 *   }
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   > ${buttons('active')} {
 *     border: none;
 *   }
 * `
 *
 * // CSS in JS Output
 *
 *  'button:active,
 *  'input[type="button"]:active,
 *  'input[type=\"reset\"]:active,
 *  'input[type=\"submit\"]:active: {
 *   'border': 'none'
 * }
 */

/**
 * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.
 * @example
 * // Styles as object usage
 * const styles = {
 *   [textInputs('active')]: {
 *     'border': 'none'
 *   }
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   > ${textInputs('active')} {
 *     border: none;
 *   }
 * `
 *
 * // CSS in JS Output
 *
 *  'input[type="color"]:active,
 *  input[type="date"]:active,
 *  input[type="datetime"]:active,
 *  input[type="datetime-local"]:active,
 *  input[type="email"]:active,
 *  input[type="month"]:active,
 *  input[type="number"]:active,
 *  input[type="password"]:active,
 *  input[type="search"]:active,
 *  input[type="tel"]:active,
 *  input[type="text"]:active,
 *  input[type="time"]:active,
 *  input[type="url"]:active,
 *  input[type="week"]:active,
 *  input:not([type]):active,
 *  textarea:active': {
 *   'border': 'none'
 * }
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Provides an easy way to change the `wordWrap` property.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...wordWrap('break-word')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${wordWrap('break-word')}
 * `
 *
 * // CSS as JS Output
 *
 * const styles = {
 *   overflowWrap: 'break-word',
 *   wordWrap: 'break-word',
 *   wordBreak: 'break-all',
 * }
 */

/**
 * Reduces hex values if possible e.g. #ff8866 to #f86
 * @private
 */

/**
 * Resets warning cache when testing.
 *
 * @private
 */

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

/**
 * Returns a CSS calc formula for linear interpolation of a property between two values. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px').
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   fontSize: between('20px', '100px', '400px', '1000px'),
 *   fontSize: between('20px', '100px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   fontSize: ${between('20px', '100px', '400px', '1000px')};
 *   fontSize: ${between('20px', '100px')}
 * `
 *
 * // CSS as JS Output
 *
 * h1: {
 *   'fontSize': 'calc(-33.33333333333334px + 13.333333333333334vw)',
 *   'fontSize': 'calc(-9.090909090909093px + 9.090909090909092vw)'
 * }
 */

/**
 * Returns a given CSS value and its unit as elements of an array.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   '--dimension': getValueAndUnit('100px')[0],
 *   '--unit': getValueAndUnit('100px')[1],
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   --dimension: ${getValueAndUnit('100px')[0]};
 *   --unit: ${getValueAndUnit('100px')[1]};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   '--dimension': 100,
 *   '--unit': 'px',
 * }
 */

/**
 * Returns a given CSS value minus its unit of measure.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   '--dimension': stripUnit('100px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   --dimension: ${stripUnit('100px')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   '--dimension': 100
 * }
 */

/**
 * Returns a number (float) representing the luminance of a color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff',
 *   background: getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?
 *                             'rgba(58, 133, 255, 1)' :
 *                             'rgba(255, 57, 149, 1)',
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff'};
 *   background: ${getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?
 *                             'rgba(58, 133, 255, 1)' :
 *                             'rgba(255, 57, 149, 1)'};
 *
 * // CSS in JS Output
 *
 * div {
 *   background: "#CCCD64";
 *   background: "rgba(58, 133, 255, 1)";
 * }
 */

/**
 * Returns a set of media queries that resizes a property (or set of properties) between a provided fromSize and toSize. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px') to constrain the interpolation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...fluidRange(
 *    {
 *        prop: 'padding',
 *        fromSize: '20px',
 *        toSize: '100px',
 *      },
 *      '400px',
 *      '1000px',
 *    )
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${fluidRange(
 *      {
 *        prop: 'padding',
 *        fromSize: '20px',
 *        toSize: '100px',
 *      },
 *      '400px',
 *      '1000px',
 *    )}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   "@media (min-width: 1000px)": Object {
 *     "padding": "100px",
 *   },
 *   "@media (min-width: 400px)": Object {
 *     "padding": "calc(-33.33333333333334px + 13.333333333333334vw)",
 *   },
 *   "padding": "20px",
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: hsl(359, 0.75, 0.4),
 *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${hsl(359, 0.75, 0.4)};
 *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#b3191c";
 *   background: "#b3191c";
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgb(255, 205, 100),
 *   background: rgb({ red: 255, green: 205, blue: 100 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgb(255, 205, 100)};
 *   background: ${rgb({ red: 255, green: 205, blue: 100 })};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#ffcd64";
 *   background: "#ffcd64";
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: hsla(359, 0.75, 0.4, 0.7),
 *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),
 *   background: hsla(359, 0.75, 0.4, 1),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${hsla(359, 0.75, 0.4, 0.7)};
 *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};
 *   background: ${hsla(359, 0.75, 0.4, 1)};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(179,25,28,0.7)";
 *   background: "rgba(179,25,28,0.7)";
 *   background: "#b3191c";
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
 *
 * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgba(255, 205, 100, 0.7),
 *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),
 *   background: rgba(255, 205, 100, 1),
 *   background: rgba('#ffffff', 0.4),
 *   background: rgba('black', 0.7),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgba(255, 205, 100, 0.7)};
 *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};
 *   background: ${rgba(255, 205, 100, 1)};
 *   background: ${rgba('#ffffff', 0.4)};
 *   background: ${rgba('black', 0.7)};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(255,205,100,0.7)";
 *   background: "rgba(255,205,100,0.7)";
 *   background: "#ffcd64";
 *   background: "rgba(255,255,255,0.4)";
 *   background: "rgba(0,0,0,0.7)";
 * }
 */

/**
 * Returns a string value for the darkened color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: darken(0.2, '#FFCD64'),
 *   background: darken('0.2', 'rgba(255,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${darken(0.2, '#FFCD64')};
 *   background: ${darken('0.2', 'rgba(255,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#ffbd31";
 *   background: "rgba(255,189,49,0.7)";
 * }
 */

/**
 * Returns a string value for the lightened color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: lighten(0.2, '#CCCD64'),
 *   background: lighten('0.2', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${lighten(0.2, '#FFCD64')};
 *   background: ${lighten('0.2', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#e5e6b1";
 *   background: "rgba(229,230,177,0.7)";
 * }
 */

/**
 * Returns an HslColor or HslaColor object. This utility function is only useful
 * if want to extract a color component. With the color util `toColorString` you
 * can convert a HslColor or HslaColor object back to a string.
 *
 * @example
 * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1
 * const color1 = parseToHsl('rgb(255, 0, 0)');
 * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2
 * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');
 */

/**
 * Returns an RgbColor or RgbaColor object. This utility function is only useful
 * if want to extract a color component. With the color util `toColorString` you
 * can convert a RgbColor or RgbaColor object back to a string.
 *
 * @example
 * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1
 * const color1 = parseToRgb('rgb(255, 0, 0)');
 * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2
 * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');
 */

/**
 * Returns black or white (or optional passed colors) for best
 * contrast depending on the luminosity of the given color.
 * When passing custom return colors, strict mode ensures that the
 * return color always meets or exceeds WCAG level AA or greater. If this test
 * fails, the default return color (black or white) is returned in place of the
 * custom return color. You can optionally turn off strict mode.
 *
 * Follows [W3C specs for readability](https://www.w3.org/TR/WCAG20-TECHS/G18.html).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   color: readableColor('#000'),
 *   color: readableColor('black', '#001', '#ff8'),
 *   color: readableColor('white', '#001', '#ff8'),
 *   color: readableColor('red', '#333', '#ddd', true)
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   color: ${readableColor('#000')};
 *   color: ${readableColor('black', '#001', '#ff8')};
 *   color: ${readableColor('white', '#001', '#ff8')};
 *   color: ${readableColor('red', '#333', '#ddd', true)};
 * `
 *
 * // CSS in JS Output
 * element {
 *   color: "#fff";
 *   color: "#ff8";
 *   color: "#001";
 *   color: "#000";
 * }
 */

/**
 * Returns the complement of the provided color. This is identical to adjustHue(180, <color>).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: complement('#448'),
 *   background: complement('rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${complement('#448')};
 *   background: ${complement('rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#884";
 *   background: "rgba(153,153,153,0.7)";
 * }
 */

/**
 * Returns the contrast ratio between two colors based on
 * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).
 *
 * @example
 * const contrastRatio = getContrast('#444', '#fff');
 */

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

/**
 * SECTION: handle `click` event
 */

/**
 * SECTION: handle `input` event
 */

/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

/**
 * Sets the hue of a color to the provided value. The hue range can be
 * from 0 and 359.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: setHue(42, '#CCCD64'),
 *   background: setHue('244', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${setHue(42, '#CCCD64')};
 *   background: ${setHue('244', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#cdae64";
 *   background: "rgba(107,100,205,0.7)";
 * }
 */

/**
 * Sets the lightness of a color to the provided value. The lightness range can be
 * from 0 and 1.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: setLightness(0.2, '#CCCD64'),
 *   background: setLightness('0.75', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${setLightness(0.2, '#CCCD64')};
 *   background: ${setLightness('0.75', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#4d4d19";
 *   background: "rgba(223,224,159,0.7)";
 * }
 */

/**
 * Sets the saturation of a color to the provided value. The saturation range can be
 * from 0 and 1.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: setSaturation(0.2, '#CCCD64'),
 *   background: setSaturation('0.75', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${setSaturation(0.2, '#CCCD64')};
 *   background: ${setSaturation('0.75', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#adad84";
 *   background: "rgba(228,229,76,0.7)";
 * }
 */

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

/**
 * Shades a color by mixing it with black. `shade` can produce
 * hue shifts, where as `darken` manipulates the luminance channel and therefore
 * doesn't produce hue shifts.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: shade(0.25, '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${shade(0.25, '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#00003f";
 * }
 */

/**
 * Shorthand accepts up to five values, including null to skip a value, and maps them to their respective directions. The first value can optionally be a position keyword.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...position('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${position('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'top': '12px',
 *   'right': '24px',
 *   'bottom': '36px',
 *   'left': '48px'
 * }
 *
 * // Styles as object usage
 * const styles = {
 *   ...position('absolute', '12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${position('absolute', '12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'position': 'absolute',
 *   'top': '12px',
 *   'right': '24px',
 *   'bottom': '36px',
 *   'left': '48px'
 * }
 */

/**
 * Shorthand for easily setting the animation property. Allows either multiple arrays with animations
 * or a single animation spread over the arguments.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'animation': 'rotate 1s ease-in-out, colorchange 2s'
 * }
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...animation('rotate', '1s', 'ease-in-out')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${animation('rotate', '1s', 'ease-in-out')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'animation': 'rotate 1s ease-in-out'
 * }
 */

/**
 * Shorthand for the border property that splits out individual properties for use with tools like Fela and Styletron. A side keyword can optionally be passed to target only one side's border properties.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...border('1px', 'solid', 'red')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${border('1px', 'solid', 'red')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderColor': 'red',
 *   'borderStyle': 'solid',
 *   'borderWidth': `1px`,
 * }
 *
 * // Styles as object usage
 * const styles = {
 *   ...border('top', '1px', 'solid', 'red')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${border('top', '1px', 'solid', 'red')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopColor': 'red',
 *   'borderTopStyle': 'solid',
 *   'borderTopWidth': `1px`,
 * }
 */

/**
 * Shorthand that accepts a value for side and a value for radius and applies the radius value to both corners of the side.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderRadius('top', '5px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderRadius('top', '5px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopRightRadius': '5px',
 *   'borderTopLeftRadius': '5px',
 * }
 */

/**
 * Shorthand that accepts any number of background values as parameters for creating a single background statement.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...backgrounds('url("/image/background.jpg")', 'linear-gradient(red, green)', 'center no-repeat')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${backgrounds('url("/image/background.jpg")', 'linear-gradient(red, green)', 'center no-repeat')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'background': 'url("/image/background.jpg"), linear-gradient(red, green), center no-repeat'
 * }
 */

/**
 * Shorthand that accepts any number of backgroundImage values as parameters for creating a single background statement.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...backgroundImages('url("/image/background.jpg")', 'linear-gradient(red, green)')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${backgroundImages('url("/image/background.jpg")', 'linear-gradient(red, green)')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'backgroundImage': 'url("/image/background.jpg"), linear-gradient(red, green)'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderColor('red', 'green', 'blue', 'yellow')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderColor('red', 'green', 'blue', 'yellow')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopColor': 'red',
 *   'borderRightColor': 'green',
 *   'borderBottomColor': 'blue',
 *   'borderLeftColor': 'yellow'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderStyle('solid', 'dashed', 'dotted', 'double')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderStyle('solid', 'dashed', 'dotted', 'double')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopStyle': 'solid',
 *   'borderRightStyle': 'dashed',
 *   'borderBottomStyle': 'dotted',
 *   'borderLeftStyle': 'double'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderWidth('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderWidth('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopWidth': '12px',
 *   'borderRightWidth': '24px',
 *   'borderBottomWidth': '36px',
 *   'borderLeftWidth': '48px'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...margin('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${margin('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'marginTop': '12px',
 *   'marginRight': '24px',
 *   'marginBottom': '36px',
 *   'marginLeft': '48px'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...padding('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${padding('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'paddingTop': '12px',
 *   'paddingRight': '24px',
 *   'paddingBottom': '36px',
 *   'paddingLeft': '48px'
 * }
 */

/**
 * Shorthand to set the height and width properties in a single statement.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...size('300px', '250px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${size('300px', '250px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'height': '300px',
 *   'width': '250px',
 * }
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @deprecated - This will be deprecated in v5 in favor of `easeIn`, `easeOut`, `easeInOut`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': timingFunctions('easeInQuad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${timingFunctions('easeInQuad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',
 * }
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': easeIn('quad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${easeIn('quad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',
 * }
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': easeInOut('quad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${easeInOut('quad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.455,  0.030, 0.515, 0.955)',
 * }
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': easeOut('quad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${easeOut('quad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.250,  0.460, 0.450, 0.940)',
 * }
 */

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

/**
 * This is the abstract API for an update queue.
 */

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */

/**
 * Tints a color by mixing it with white. `tint` can produce
 * hue shifts, where as `lighten` manipulates the luminance channel and therefore
 * doesn't produce hue shifts.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: tint(0.25, '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${tint(0.25, '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#bfbfff";
 * }
 */

/**
 * Translate native top level events into event types.
 */

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

/**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Used by act() to track whether you're inside an act() scope.
 */

/**
 * Validation function for `value` and `defaultValue`.
 */

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */

/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */

/**
 * super basic version of sprintf
 * @private
 */

/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @noinline */

/************************************************************************/

/******/

/***/

/*eslint-disable no-self-compare*/

/*eslint-enable no-self-compare*/

//

//    always know when it is a fiber.

//    compatible.

//    is faster.

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    more difficult to predict when they get optimized and they are almost

//    never inlined properly in static compilers.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//    to optimize in a non-JIT environment.

//   1. The checked React property when present

//   1. The value React property when present

//   2. The defaultChecked React property when present

//   2. The defaultValue React property when present

//   3. An empty string

//   3. Otherwise, false

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

//  1. The value React property

//  2. The defaultValue React property

//  3. Otherwise there should be no change

//  `select` elements automatically pick the first item #13222

//  prettier-ignore

// "Member not found" in strict mode, and in Firefox which does not

// "Pause on exceptions" behavior. Because React wraps all user-provided

// "Registers" used to "return" multiple values

// "break on all exceptions" in your console,

// "consumed" by the delegate iterator. If context.method was

// "retries" — a special update that attempts to flip a Suspense boundary

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// "stack" as the parent. Then append children as we go in beginWork

// $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests

// $FlowFixMe

// $FlowFixMe - Should be inferred as not undefined.

// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

// $FlowFixMe Flow doesn't know about toStringTag

// $FlowFixMe Flow gets confused by a WeakSet feature check below.

// $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key

// $FlowFixMe Flow incorrectly thinks existing element's key can be a number

// $FlowFixMe Flow thinks console is immutable.

// $FlowFixMe It does accept undefined.

// $FlowFixMe The Flow type is opaque but there's no way to actually create it.

// $FlowFixMe This is okay but Flow doesn't know it.

// $FlowFixMe This should probably use `delete container._reactRootContainer`

// $FlowFixMe number or string is fine here

// $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

// $FlowFixMe: Flow complains about not setting a value, which is intentional here

// $FlowFixMe: Flow doesn't like mixed types

// $FlowFixMe: Ignore Flow complaining about needing a value

// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors

// $FlowIssue Flow incorrectly thinks Map has no prototype

// $FlowIssue Flow incorrectly thinks Set has no prototype

// $FlowIssue `createElement` should be updated for Web Components

// $FlowIssue symbol is perfectly valid here

// (For instance: TinyMCE editor used in a list component that supports pasting to add more,

// (Rendering will throw with a helpful message and as soon as the type is

// (There's no appropriate action type for DevTools overrides.)

// (and would be incorrectly rendered on the client).

// (because the hook only marks sources as dirty if it's written to their WIP version).

// (eg DOM renderer may schedule auto-focus for inputs and form controls).

// (eg DOM renderer supports auto-focus for certain elements).

// (inside this function), since by suspending at the end of the render

// (needed for certain tests that spyOn input values and Safari)

// *unhide* children that were previously hidden, so check if this

// - BeforeInputEventPlugin

// - ChangeEventPlugin

// - EnterLeaveEventPlugin

// - However, we may have gotten new wrapper props after that

// - SelectEventPlugin

// - This render may have been triggered by a Redux store update that produced new child props

// - a bug where the `select` does not scroll to the correct option because singular

// - a bug where the `select` set the first item as selected despite the `size` attribute #14239

// --- Welcome to debugging React ---

// -------------------

// -progress queue, we need to clone the updates. We usually clone during

// ...)) which otherwise throws a "_processChildContext is not a function"

// ...and patterns for individual operators/function names

// .constructor.prototype properties for functions that return Generator

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// 0b111111111111111111111111111111

// 1) "delayed", 2) "initial render", 3) "retry".

// 1) Nobody should add any instance methods on this. Instance methods can be

// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

// 2) Nobody should rely on `instanceof Fiber` for type testing. We should

// 3) We might want to experiment with using numeric keys since they are easier

// 4) We can easily go from a constructor to a createFiber object literal if that

// 5) It should be easy to port this to a C struct and keep a C implementation

// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire

// <select> value update needs to occur after <option> children

// @@iterator function is called on it. Some browsers' implementations of the

// @private

// @see http://www.quirksmode.org/js/events_properties.html

// @see https://electronjs.org/docs/api/webview-tag

// A .throw or .return when the delegate iterator has no .throw

// A C0 control is a code point in the range \u0000 NULL to \u001F

// A Generator should always return itself as the iterator object when the

// A changed version number will let those components know to throw and restart the render.

// A class component without an instance only mounts if it suspended

// A cursor to a boolean indicating whether the context has changed.

// A cursor to the current merged context object on the stack.

// A few React string attributes have a different name.

// A fiber's effect list consists only of its children, not itself. So if

// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or

// A lane is said to be entangled with another when it's not allowed to render

// A lazy component only mounts if it suspended inside a non-

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// A reserved attribute.

// A safety way is to access one of the cross origin properties: Window or Location

// A selector might throw after a source mutation.

// ATTENTION

// Accessing the contentDocument of a HTMLIframeElement can cause the browser

// Accumulate all instances and listeners via the target -> root path.

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Add all children to a key map for quick lookups.

// Add an extra top frame while an element is being validated

// Add the remaining children to a temporary map so that we can find them by

// Adds leading coma if properties preceed color-stops

// After all the children have unmounted, it is now safe to remove the

// After these have been cleaned up, we'll let them throw.

// After this we'll use a set of heuristics to determine whether this

// All of the above are perceived as null.

// All remaining items in the tail are insertions.

// All tasks are delayed, and this is the task with the earliest delay.

// All the transition lanes are taken, too. This should be very

// Allow injecting another batching function later

// Allow null for conditional declaration

// Allow single or multiple animations passed

// Already timed out, so perform work without checking if we need to yield.

// Also validate hook order for cascading updates.

// Always call this before exiting `commitRoot`, to ensure that any

// Always collect profile timings when DevTools are present.

// Always set children to the same thing. In IE9, the selection range will

// An incomplete component only mounts if it suspended inside a non-

// An indeterminate component only mounts if it suspended inside a non-

// An update was scheduled from inside a reducer. Add the new

// Any existing children that weren't consumed above were deleted. We need

// Any insertions at the end of the tail list after this point

// Any reducers that existed in both the new and old rootReducer

// Anything lower than normal priority should remain at the current level.

// Append a new context item.

// Append all the effects of the subtree and this fiber onto the effect

// Append pending updates to base queue

// Append the captured update the end of the cloned list.

// Append the rendered row to the child list.

// Append the update to the end of the list.

// Append to the beginning of the list.

// Append to the end of the list

// Append to the end of the list.

// Apply previous operator, since it has precedence over current one

// Apply the diff to the DOM node.

// Apply the diff.

// As a result though, React will see the scheduled update as a noop and bailout.

// As a workaround to support multiple concurrent renderers, we categorize

// As the event types are in pairs of two, we need to iterate

// Assign the result of the finished delegate to the temporary

// Assumes there is no parent namespace.

// Assumes timestamps are monotonically increasing.

// AsyncIterator objects; they just return a Promise for the value of

// AsyncMode is deprecated along with isAsyncMode

// AsyncMode should be deprecated

// At the same time we're going to reverse the list of everything

// At this point, the return fiber's effect list is empty except for

// Attach a listener to the promise to "ping" the root and retry. But only if

// Attach our event handlers

// Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

// Attempt to complete the current unit of work, then move to the next

// Attempt to increase the priority of this target.

// Attempting the main content

// Avoid an extra prototype jump for these methods.

// Avoid deopting on observable arguments or heterogeneous types.

// Avoid failures from read-only properties

// Avoid propagating failures to Promises returned by later

// Avoid recreating masked context unless unmasked context has changed.

// Avoid setting value attribute on submit/reset inputs as it overrides the

// Avoid spamming the console because they are often not actionable except for lib authors

// Based on the previous check, one of these must be true

// Based on:

// Batching is necessary here in order to ensure that all event handlers run

// Be forgiving, per 25.3.3.3.3 of the spec:

// Because this fiber did not complete, don't reset its expiration time.

// Before Symbol spec.

// Before entering the begin phase, clear pending update priority.

// Before entering the begin phase, copy the work-in-progress onto a dummy

// Before exiting, make sure there's a callback scheduled for the next

// Boundaries without fallbacks or should be avoided are not considered since

// Browser does not implement `key`, polyfill as much of it as we can.

// Browsers introduced an intervention, making these events

// Browsers support silencing uncaught errors by calling

// Browsers without "deltaMode" is reporting in raw wheel delta where one

// Bubble up the earliest expiration time.

// Built-in SSR attribute is allowed

// Built-in properties that belong on the element

// But in the event that it's executed more than once–

// But only if this has a fallback.

// But we shouldn't call any lifecycle methods or callbacks. Remove

// But works for yielding (the common case) and should support resuming.

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// By default, return `true` to log errors to the console.

// By explicitly using `prop-types` you are opting into new development behavior.

// CSP to forbid Function, and you're not willing to fix either of those

// Cache unmasked context so we can avoid recreating masked context unless necessary.

// Calculate the diff between the two objects.

// Call delegate.iterator[context.method](context.arg) and handle the

// Calling defineProperty() again should be equivalent.

// Cancel an existing timeout.

// Capture and retry

// Capture errors so they don't interrupt unmounting.

// Capture local references to native APIs, in case a polyfill overrides them.

// Capture values for checking if and when this component unmounts

// Captured a suspense effect. Re-render the boundary.

// Captured updates are updates that are thrown by a child during the render

// Careful!

// Careful: RN currently depends on this prefix

// Cast `value` to a string to ensure the value is set correctly. While

// Caution: React DevTools currently depends on this property

// Certain renderers require commit-time effects for initial mount.

// Check for a possible change between when we last rendered now.

// Check for entangled lanes and add them to the batch.

// Check for syntax errors:

// Check for tasks that are no longer delayed and add them to the queue.

// Check if MessageChannel is supported, too.

// Check if any lanes are being starved by other work. If so, mark them as

// Check if any work has expired.

// Check if both types have a family and it's the same one.

// Check if browser support events with passive listeners

// Check if module is in cache

// Check if previous string ref matches new string ref

// Check if the children have any pending work.

// Check if the context matches.

// Check if the work completed or if something threw.

// Check if the work-in-progress queue is a clone.

// Check if there are updates that we skipped tree that might have unblocked

// Check if there was a render phase update

// Check if there's an existing task. We may be able to reuse it.

// Check if there's remaining work on this root

// Check if this host node is stable or about to be placed.

// Check if this target is unblocked. Returns true if it's unblocked.

// Check if we're dealing with a real forwardRef. Don't want to crash early.

// Check if we're inside unbatchedUpdates

// Check if we're not already rendering

// Check that all units are the same

// Check that the browser supports the APIs we need to implement our special

// Children can be more than one argument, and those are transferred onto

// Chrome and IE fire non-standard event when selection is changed (and

// Chrome raises "The specified value <x> is not a valid email address".

// Circular

// Clear ContentReset from the effect tag

// Clear already finished discrete updates in case that a later call of

// Clear completed interactions from the pending Map.

// Clear the "placement" from effect tag so that we know that this is

// Clone from the current hook.

// Clone the dependencies object. This is mutated during the render phase, so

// Clone the update queue from current. Unless it's already a clone.

// Command keys insert or clear IME input.

// Commit the effects

// Commit the placeholder.

// Commit the work prepared earlier.

// Compare sort index first, then task id.

// Completing this fiber spawned new work. Work on that next.

// Computes the next Just Noticeable Difference (JND) boundary.

// Conceptually the HostRoot fiber is a child of the Container node. So if you

// Conceptually this is similar to Placement in that a new subtree is

// Conceptually, this is really the same as pinging. We can use any

// Confirmed that the boundary is in a concurrent mode tree. Continue

// Connect to the new tree.

// Consider removing.

// Context is created before the class component is instantiated so check for instance.

// Context list has a pending update. Mark that this fiber performed work.

// Context providers should defer to sCU for rendering

// Contrary to `setAttribute`, object properties are properly

// Controlled attributes are not validated

// Convince Flow we've calculated it (it's DEV-only in this method.)

// Count leading zeros. Only used on lanes, so assume input is an integer.

// Count of children found in the current subtree.

// Count the number of times the root synchronously re-renders without

// Counters used to generate unique IDs.

// Create a fake event type.

// Create a global error event handler. We use this to capture the value

// Create a new module (and put it into the cache)

// Create a new queue and setState method,

// Create an event handler for our fake event. We will synchronously

// Create the script via .innerHTML so its "parser-inserted" flag is

// Currently this is only used with renderSubtreeIntoContainer; not sure if it

// Cut off the return pointers to disconnect it from the tree. Ideally, we

// DEV mode, we create a separate object for Context.Consumer that acts

// DEV version of invokeGuardedCallback

// DEV-only fields

// DOM after hydrating, and there are boundaries in the DOM

// DOM component is still mounted; update

// DOM node, and call the user-provided callback from inside an event handler

// DOM properties, then it is an invalid aria-* attribute.

// Dedup strategy: Warn once per component.

// Dedupe by the rendering component because it's the one that needs to be fixed.

// Default

// Default to a ContinuousEvent. Note: we might

// Default to a dummy "batch" implementation that just runs the callback

// Default to shallow comparison

// Defaults

// Defensive coding. This is never expected to happen.

// Define Generator.prototype.{next,throw,return} in terms of the

// Define the unified helper method that is used to implement .next,

// Delegate to the injected renderer-specific implementation

// Delete the fallback child fragment

// Delete the old fiber and place the new one.

// Deletions are added in reversed order so we add it to the front.

// Deliberately forget the last sent value so that we don't

// Despite the naming that might imply otherwise, this method only

// Detach refs and call componentWillUnmount() on the whole subtree.

// Detach the insertion after the last node that was already

// Detect buggy property enumeration order in older V8 versions.

// Determine the next expiration time to work on, using the fields stored

// Determine the next lanes to work on, and their priority.

// DevTools exists

// DevTools exists, even though it doesn't support Fiber.

// Didn't match.

// Disconnect from the old current.

// Disconnect the alternate pointers.

// Disconnect the tail rows after the content row.

// Dispatch the exception by looping back around to the

// Distinguish between actual "data" props that were passed to the wrapper component,

// Do a pass over the next row.

// Do not append effects to parents if a sibling failed to complete

// Do not assign value if it is already set. This prevents user text input

// Do not pop unless this Fiber provided the current context.

// Do not reset the effect list.

// Do not set `select.value` as exact behavior isn't consistent across all

// Do not work on any idle work until all the non-idle work has finished,

// Do some typechecking here since we call this blindly. We want to ensure

// Don't bother comparing lengths in prod because these arrays should be

// Don't bother with a very short suspense time.

// Don't change these two values. They're used by React Dev Tools.

// Don't count time spent in a timed out Suspense subtree as part of the base duration.

// Don't deduplicate because this legitimately causes bugs

// Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.

// Don't fire the event while the user is dragging. This matches the

// Don't need to call updateMouseMovementPolyfillState() here

// Don't persist the state accumulated from the render phase updates to

// Don't push this Fiber's context unless it's unique.

// Don't replay promises. Treat everything else like an error.

// Don't reset current debug fiber, since we're about to work on the

// Don't return HostRoot or SuspenseComponent here.

// Don't return anything

// Don't return anything.

// Don't scan deeper if this is a matching provider

// Don't update "base" render times for bailouts.

// Don't warn about react-lifecycles-compat polyfilled components.

// Don't warn about react-lifecycles-compat polyfilled methods though.

// Don't warn in exotic cases like chrome-extension://.

// Drag-and-Drop Attributes

// Due to this, it is left to the user to implement at this time.

// Dummy constructor functions that we use as the .constructor and

// During mounting we don't know the child context yet as the instance doesn't exist.

// Each iteration, currentParent is populated with node's host parent if not

// Eager reads the version of a mutable source and stores it on the root.

// Early bailout if there's no pending work left.

// Edge fails with "Object expected" in some scenarios.

// Effectively, this gives us try-catch behavior without actually using

// Effects

// Electron ships a custom <webview> tag to display external web content in

// Elements are stringified (which is normally irrelevant

// Enables DevTools to append owner stacks to error messages in DEV mode.

// Ensure we have the right element, and that the user is not dragging a

// Ensure we transfer the update queue to the parent so that it doesn't

// Entangle the updates so that they render in the same batch.

// Equivalent of `typeof` but with special handling for array and regexp.

// Error Handling

// Error was thrown at the root. There is no parent, so the root

// Especially since these might also just pop in during future commits.

// Even better would be if children weren't special cased at all tho.

// Even if this property uses a namespace we use getAttribute

// Even if we abort and rereconcile the children, that will try to hydrate

// Even though we can't restart right now, we might get an

// Even when hot reloading, allow dependencies to stabilize

// Events are not possible without cancelling IME.

// Eventually we'll delete this branch altogether.

// Except for NoPriority, these correspond to Scheduler priorities. We use

// Exception thrown outside of any try block that could handle

// Execute the module function

// Exit loop after executing an opening parenthesis or function

// Exit without suspending.

// Expect IME keyCode on each keydown. If we get any other

// Expected to be working on a non-root fiber. This is a fatal error

// Experimental Create Event Handle API.

// Extra space so second column lines up

// Extract the VM specific prefix used by each line.

// FF does not set `charCode` for the Enter-key, check against `keyCode`.

// FIXME: More than one lane can finish in a single commit.

// FIXME: What if the suspended lanes are Idle? Should not restart.

// Fabric (secondary); React DOM (primary) and React ART (secondary).

// Failing to do this will result in unnecessary calls to componentWillReceiveProps.

// Fall back gracefully if we're running an older version of Scheduler.

// Fall back to the production implementation.

// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).

// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).

// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).

// Fallback to just using the name if we couldn't make it throw.

// Fallback to nativeEvent.srcElement for IE9

// Fast path. We can bail out without scheduling React to re-render.

// Fiber

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

// Finally, we flush all the warnings

// Finally, we need to push the host context to the stack.

// FireFox implements `key` but returns `MozPrintableKey` for all

// Firefox creates a click event on right mouse clicks. This removes the

// Firefox creates a keypress event for function keys too. This removes

// Firefox doesn't support selectionchange, so check selection status

// First clear any existing content.

// First look for lanes that are completely unclaimed, i.e. have no

// First pass: Destroy stale passive effects.

// First replay discrete events.

// First, Legacy Mode has different semantics for backwards compatibility. The

// First, let's check if we're in an unusual parsing mode...

// First, validate keys.

// Flag this event loop as needing state restore.

// Flags that we're not actually blocked on anything as far as we know.

// Flatten children. We'll warn if they are invalid

// Flip backward selections, so we can set with a single range.

// Flow does not allow string concatenation of most non-string types. To work

// Flow knows about invariant, so it complains if I add a break

// Flow needs the return null here, but ESLint complains about it.

// Flush any pending passive effects before deciding which lanes to work on,

// Flush the immediate callbacks that were scheduled during this batch

// Flush the immediate callbacks that were scheduled during this batch.

// Flush the queue in the next tick, at the earliest.

// Flush the synchronous work now, unless we're already working or inside

// Focused number inputs synchronize on blur. See ChangeEventPlugin.js

// Focusing a node can change the scroll position, which is undesirable

// For HTML, certain tags should omit their close tag. We keep a list for

// For IE8 and IE9.

// For all non-delegated events, apart from scroll, we attach

// For all other deleted properties we add it to the queue. We use

// For any other property we always add it to the queue and then we

// For each root with pending discrete updates, schedule a callback to

// For each wakeable, attach a listener so that when it resolves, React

// For example, "undefined" or "of type array"

// For example, SuspenseList coordinates when nested content appears.

// For example, when unhiding a hidden tree, we include all the lanes

// For hydration we reuse the update path but we treat the oldProps

// For input and textarea we current always set the value property at

// For now, the "id" of stateful hooks is just the stateful hook index.

// For now, we use the same heuristic as in the old ExpirationTimes model:

// For number inputs, the display value loses trailing decimal points. For email inputs,

// For other native event types, do nothing.

// For simplicity, reapply `defaultValue` if `multiple` is toggled.

// For text content children we compare against textContent. This

// For the native GeneratorFunction constructor, the best we can

// For those exceptions where entanglement is semantically important, like

// Force a re-render if the implementation changed due to hot reload:

// Forks can return `false` if this isn't desirable.

// Fortunately this only impacts DEV builds.

// ForwardRef is special because its resolved .type is an object,

// Found a pending lane with no expiration time. If it's not suspended, or

// Found it!

// Found the nearest boundary.

// Freeze the next style object so that we can assume it won't be

// GenStateExecuting and loop back for another invocation.

// Give the component that originally created this child.

// Given a DOM node, return the closest HostComponent or HostText fiber ancestor.

// Guard against Fiber being unmounted.

// HTML

// HTML and attributes. Ideally we should preserve structure but it's

// HTML parsing normalizes CR and CRLF to LF.

// Handle listeners that are on HostComponents (i.e. <div>)

// Handle object types

// Handle top level unkeyed fragments as if they were arrays.

// Helper for defining the .next, .throw, and .return methods of the

// Helpers to patch console.logs to avoid logging during side-effect free

// Here we check to see if the defaultValue has actually changed, avoiding these problems

// Host root, text node or just invalid type.

// HostRoot back. To get to the HostRoot, you need to pass a child of it.

// Hot reloading is disabled.

// However, `act` uses `batchedUpdates`, so there's no way to distinguish

// However, since the HostRoot starts out with an alternate it might

// However, since we're going to remain on the fallback, we no longer want

// However, the "included" lanes could be mutated in between updates in the

// However, we already warn about bad casing elsewhere.

// However, we can't just call getRootHostContext() and push it because

// I.e. if we had null values before, then we want to defer this

// ID so client and server IDs match and throws to rerender.

// IE 11 parses & normalizes the style attribute as opposed to other

// IE 11 uses modern selection, but doesn't support the extend method.

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)

// IE does not have innerHTML for SVG nodes, so instead we inject the

// IE fires the `keypress` event when a user types an emoji via

// IE specific).

// IE. This event does not support bubbling or cancelling, and

// IE8 does not implement `charCode`, but `keyCode` has the correct value.

// IE9 claims to support the input event but fails to trigger it when

// INFORMATION SEPARATOR ONE, inclusive:

// Ideally this should reset to previous but this shouldn't be called in

// If A is deeper, crawl up.

// If B is deeper, crawl up.

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If Scheduler runs in a non-DOM environment, it falls back to a naive

// If `outerNode` has children, this is always the second time visiting

// If `rootNode.form` was non-null, then we could try `form.elements`,

// If a component has string refs, we will assign a different object later.

// If a component throws an error, we replay it again in a synchronously

// If a controlled event was fired, we may need to restore the state of

// If a paste event occurs after a keypress, throw out the input

// If a rejected Promise was yielded, throw the rejection back

// If a scheduler task throws, exit the current browser task so the

// If additional passive effects were scheduled, increment a counter. If this

// If all lanes have pending work, look for a lane that isn't currently

// If all the default lanes are already being worked on, look for a

// If an SVG prop is supplied with bad casing, it will

// If an error occurred during hydration,

// If an exception is thrown from innerFn, we leave state ===

// If an update was already in progress, we should schedule an Update

// If any of the inputs to useMutableSource change, reading is potentially unsafe.

// If attribute type is boolean, we know for sure it won't be an execution sink

// If both copies of the parent fiber point to the same child, we can

// If change and propertychange bubbled, we'd just bind to it like all the

// If changes to the hydrated node need to be applied at the

// If completing this work spawned new work, do that next. We'll come

// If componentDidCatch is the only error boundary method defined,

// If composition event is available, we extract a string only at

// If console.error is overridden, or logCapturedError() shows a dialog that throws,

// If context.method was "throw" but the delegate handled the

// If controlled, assign the value attribute to the current value on blur

// If document doesn't exist we know for sure we will crash in this method

// If either the source or the subscription have changed we can't can't trust the update queue.

// If enqueue has been called before, then we want to wait until

// If everything is being worked on, pick any lane. This has the

// If it is not host node and, we might have a host node inside it.

// If it was the primary children that just suspended, capture and render the

// If it's a spacebar character, assume that we have already handled

// If it's not a container, we check if it's an instance.

// If it's safe to read from this source during the current render,

// If layout work was scheduled, flush it now.

// If maybeInvokeDelegate(context) changed context.method from

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// If no async work was scheduled for this interaction,

// If no characters are being inserted, no BeforeInput event should

// If no event plugins have been injected, we are in a server environment.

// If no state update is scheduled then the boundary will swallow the error.

// If none of the children had any work, that means that none of

// If nothing suspended before and we're rendering the same children,

// If nothing threw a Promise or all the same fallbacks are already showing,

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If passive option is not supported, then the event will be

// If props or context changed, mark the fiber as having performed work.

// If pure is true, the selector returned by selectorFactory will memoize its results,

// If shouldComponentUpdate returned false, we should still update the

// If something asked for a stack inside a fake render, it should get ignored.

// If something inside a portal is clicked, that click should bubble

// If something threw an error, try rendering one more time. We'll render

// If something throws, leave the remaining callbacks on the queue.

// If something was in fallback state last time, and we have all the

// If that inner render function is different, we'll build a new forwardRef type.

// If the boundary is outside of blocking mode, we should *not*

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the delegate iterator has a return method, give it a

// If the direct event target isn't a React owned DOM node, we need to look

// If the discrete updates scheduled passive effects, flush them now so that

// If the dispatched exception was caught by a catch block,

// If the event can be delegated (or is capture phase), we can

// If the getSnapshot function changed, we also shouldn't rely on the update queue.

// If the instance does not exist yet, we will push null at first,

// If the left or right node is smaller, swap with the smaller of those.

// If the listener entry is empty or we should upgrade, then

// If the new child is undefined, and the return fiber is a composite

// If the object is an opaque reference ID, it's expected that

// If the prop isn't in the special list, treat it as a simple attribute.

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If the root is not a host container, we're in a disconnected tree. I.e.

// If the root or lanes have changed, throw out the existing stack

// If the source mutated between render and now,

// If the subscriber throws, rethrow it in a separate task

// If the tail is hidden there might not be an Suspense boundaries

// If the target node is part of a hydrated or not yet rendered subtree, then

// If the text differs, mark it as an update. All the work in done in commitWork.

// If the top level item is an array, we treat it as a set of children,

// If the update payload indicates that there is a change or if there

// If the value is an error, call this function immediately after it is thrown

// If there *are* pending mutations, we may still be able to safely read

// If there are higher priority lanes, we'll include them even if they

// If there are no passive effects, then we can complete the pending interactions.

// If there are no pending mutations, then `root.mutableReadLanes` will be

// If there are passive effects, schedule a callback to flush at

// If there are pending passive effects unmounts for this Fiber,

// If there is a ref on a host node we need to schedule a callback

// If there is more work to do in this returnFiber, do that next.

// If there is no alternate, then we only need to check if it is mounted.

// If there is no alternate, this might be a new tree that isn't inserted

// If there's a current queue, and it's different from the base queue, then

// If there's ambiguity due to batching it's resolved in preference of:

// If there's more work, schedule the next message event at the end

// If there's no match, maybe there will be one further down in the child tree.

// If there's no parent, we're at the root.

// If there's no remaining work, we can clear the set of already failed

// If there's no version, then this is the first time we've read from the

// If there's still work at the current priority,

// If they don't match there's a potential tear and a full deopt render is required.

// If they were previously forced into fallbacks, they may now be able

// If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,

// If this boundary has already errored, then we had trouble processing

// If this boundary just timed out, schedule an effect to attach a

// If this boundary just timed out, then it will have a set of wakeables.

// If this doesn't spawn new work, complete the current work.

// If this happens during a replay something went wrong and it might block

// If this is a controlled radio button group, forcing the input that

// If this is a fresh new component that hasn't been rendered yet, we

// If this is a newly suspended tree, it might not get committed as

// If this is a plain function component without default props,

// If this is an aria-* attribute, but is not listed in the known DOM

// If this is an initial render of a new tree of Suspense boundaries and

// If this is an over event with a target, we might have already dispatched

// If this subtreee is running in blocking mode we can suspend,

// If this update was processed eagerly, and its reducer matches the

// If this was a boolean, it doesn't matter what the value is

// If this was the last scheduled async work for any of them,

// If we already have a queue of discrete events, and this is another discrete

// If we already suspended with a delay, then interrupting is fine. Don't

// If we are currently composing (IME) and using a fallback to do so,

// If we are currently inside another batch, we need to wait until it

// If we are only accumulating events for the target, then we don't

// If we are using the legacy FB support flag, we

// If we aren't running in "pure" mode, we don't want to memoize values.

// If we can't hydrate this instance let's try the next one.

// If we captured an error, but getDerivedStateFromError is not defined,

// If we didn't find any host children, fallback to closest host parent.

// If we didn't find anything, let's try the next sibling.

// If we didn't hit the root, that means that we're in an disconnected tree

// If we don't find a Fiber on the comment, it might be because

// If we don't have a child, try the siblings instead.

// If we don't have any more existing children we can choose a fast path

// If we don't use mutation we drill down into portals here instead.

// If we encounter useOpaqueReference's opaque object, this means we are hydrating.

// If we find that "rootContainer", we find the parent fiber

// If we get an event (ex: img onload) before committing that

// If we get updated because one of our children updated, we don't

// If we got a new source or subscribe function, re-subscribe in a passive effect.

// If we had a single constructor, it would be megamorphic and engines would deopt.

// If we had additional state updates during this life-cycle, let's

// If we have a mismatch, it might be caused by that.

// If we have already queued this exact event, then it's because

// If we have an alternate, that means this is an update and we need

// If we have an alternate, that means this is an update and we need to

// If we have any remaining hydratable nodes, we need to delete them now.

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we have two possible branches, we'll walk backwards up to the root

// If we haven't fully disabled javascript: URLs, and if

// If we hit a "Delayed" case, such as when we'd switch from content back into

// If we hydrated, then we'll need to schedule an update for

// If we pop out of the root or hit the parent the fiber we are the

// If we previously forced a fallback, we need to schedule work

// If we the instance doesn't have any children, then there can't be

// If we unwrapped and compared the inner types for wrappers instead,

// If we use mutation we drill down into portals using commitUnmount above.

// If we're about to return the first line, and the control is also on the same

// If we're already in the middle of a render, switching lanes will interrupt

// If we're already showing a fallback and it gets "retried", allowing us to show

// If we're already showing a fallback, there are cases where we need to

// If we're currently hydrating, try to hydrate this boundary.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// If we're not currently hydrating but we're in a hydration context, then

// If we're not subscribed to the store, nothing to do here

// If we're recovering from an error, reconcile without reusing any of

// If we're suspended with delay, or if it's a retry, we'll always suspend

// If we're switching from a direct text child to a normal child, or to

// If you call unmountComponentAtNode twice in quick succession, you'll

// Ignore it and don't print the stack addendum.

// Ignore the finally entry if control is not jumping to a

// Ignore.

// Implicit key determined by the index in the set

// Important!

// In Chrome, assigning defaultValue to certain input types triggers input validation.

// In DEV mode, we swap out invokeGuardedCallback for a special version

// In Fiber this, is just the state node right now. We assume it will be

// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the

// In IE9+, we have access to composition events, but the data supplied

// In IE9, propertychange fires for most input events but is buggy and

// In PROD (or in packages without access to React internals),

// In React, we let users pass `true` and `false` even though technically

// In V8, the first line is describing the message but other VMs don't.

// In a resume, we'll already have an instance we can reuse.

// In both cases, we need to throw away pending updates (since they are no longer relevant)

// In eager mode, we attach capture listeners early, so we need

// In either case, we don't want to call the event handler if the value

// In legacy mode, SuspenseList doesn't work so we just

// In legacy mode, we commit the primary tree as if it successfully

// In legacy sync mode, don't defer the subtree. Render it now.

// In order to capture, the Suspense component must have a fallback prop.

// In order to support react-lifecycles-compat polyfilled components,

// In profiling mode, resetChildExpirationTime is also used to reset

// In such a case, we directly return the `char` property instead of

// In tests, we want to enforce a mocked scheduler.

// In that case, if the source is mutated between the first and second renderer,

// In that case, throw the error from here so it doesn't get lost.

// In the initial pass we might need to construct the instance.

// In the middle of an update, it is possible to have multiple checked.

// In the second pass, we mount the new children. The trick here is that we

// In this case we should still schedule an update with React.

// In this case, call the opaque object's toString function which generates a new client

// In which case– leave pending interactions until the subsequent render.

// Include the time spent working on failed children before continuing.

// Increase its priority.

// Increase the priority of this boundary to unblock

// Increases the priority of thennables when they resolve within this boundary.

// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

// Initial mount

// Initial mount should not be batched.

// Initializing the fields below to smis and later updating them with

// Inject data generated from fallback path into the synthetic event.

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Inner memo component props aren't currently validated in createElement.

// Inner propTypes will be validated in the function component path.

// Inner props are checked in the reconciler.

// Inner props for memo are validated later.

// Insert

// Instance

// Instantiate twice to help detect side-effects.

// Instead of committing the fallback immediately, wait for more data

// Instead of mutating we could clone the event.

// Intentional fallthrough

// Intentionally camelCase

// Intentionally create event lazily.

// Intentionally fall through to the next case, which handles both

// Intentionally inside to avoid triggering lazy initializers:

// Intentionally not named imports because Rollup would use dynamic dispatch for

// Intentionally pushing one by one.

// Intentionally unsound. Pending updates form a circular list, but we

// Intentionally use the original name.

// Interaction threads are unique per root and expiration time.

// Interactions "stack"–

// Internal invariant that should never happen, but feasibly could in

// Invoke the function an extra time to help detect side-effects.

// Invokes the mount life-cycles on a previously never rendered instance.

// Invokes the update life-cycles and returns false if it shouldn't rerender.

// It also can turn \u0000 into \uFFFD inside attributes.

// It has only been added in Fiber to match the (unintentional) behavior in Stack.

// It is handled by React separately and shouldn't be written to the DOM.

// It is important to unwind the context in the reverse order.

// It may be required if the current component is an error boundary,

// It returns false if the boundary is already hidden.

// It will get deleted.

// It's also safe to do for updates too, because current.child would only be null

// It's important that ALL pending passive effect destroy functions are called

// It's okay to replace the initial doubles with smis after initialization.

// It's possible that the underlying source was mutated between the when the last "change" event fired,

// It's possible that we caught an error due to a bad mapState function, but the

// It's safe to read if the store hasn't been mutated since the last time

// It's still possible that we'll need to rebase this update later,

// It's unlikely their type would change as usually you define them inline.

// Iterate through the list of updates to compute the result.

// Iterator interface in terms of a single ._invoke method.

// Iterator will provide entry [k,v] tuples rather than values.

// Its effect list is no longer valid.

// Just set it using the onclick property so that we don't have to manage any

// Keep both the (mapped) and old keys if they differ, just as

// Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.

// Keep rendering in a loop for as long as render phase updates continue to

// Keep scanning and use the map to restore deleted items as moves.

// Keep this check inline so it only runs on the false path:

// Keep this code in sync with handleError; any changes here must have

// Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

// KeyPress is deprecated, but its replacement is not yet final and not

// Known attributes should match the casing specified in the property config.

// Layout effects have the same constraint.

// Lazy component props can't be validated in createElement

// Lazy may contain any component type so we recursively resolve it.

// Learn more about this here:

// Legacy Interface

// Legacy hook: remove it

// Let the ARIA attribute hook validate ARIA attributes

// Let's get the fiber associated with the SuspenseComponent

// Let's try everything again

// List of events that need to be individually attached to media elements.

// Listener(s) to notify when interactions begin and end.

// Live Region Attributes

// Loop through the updates and clone them.

// Make `instanceof Error` still work for returned errors.

// Make sure such renderers get scheduled for later work.

// Make sure we're on the second pass, i.e. the primary child fragment was

// Mark any Suspense boundaries with fallbacks as having work to do.

// Mark anything that was blocked on this as no longer blocked

// Mark each child as hydrating. This is a fast path to know whether this

// Mark that the fiber performed work, but only if the new state is

// Mark that the root has a pending update.

// Mark the current commit time to be shared by all Profilers in this

// Mark the current render as suspended so that we switch to working on

// Mark the parent fiber as incomplete and clear its effect list.

// Mark the updated lanes on the list, too.

// Mark them as completed.

// Mark this subtree context as having at least one invisible parent that could

// Match production behavior more closely:

// Match! Schedule an update on this fiber.

// Math.pow(2, 30) - 1

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.

// Maybe the source changed in a way that the old subscription ignored but the new one depends on.

// Meaning that newly traced interactions are appended to the previously active set.

// Memo may contain any component type so we recursively resolve it.

// Memoize state using the values we just used to render.

// Memoize the check that determines which context instance we should use.

// Memoize using the boundary fiber to prevent redundant listeners.

// Memoize using the thread ID to prevent redundant listeners.

// Merge parent and own context.

// Merge the partial state and the previous state.

// Merge the pending queue and the base queue.

// Merges additional math functionality into the defaults.

// Microdata

// Mobile Safari does not fire properly bubble click events on

// Mode, SuspenseList can also trigger this scenario, but this is a legacy-

// Modern event system doesn't use pooling.

// Mount

// Move based on index

// Moved outside to ensure DCE works with this flag

// Moving from `node` to its first child `next`.

// Moving from `node` to its next sibling `next`.

// Moving to a node from outside the window.

// Must not discard the (non-)printable Enter-key.

// Mutation mode

// NOTE: Intentionally unsound cast. All that matters is that it's a number

// NOTE: This only applies to SimpleMemoComponent, not MemoComponent,

// Native Symbol.

// Need to check if the tree still needs to be deferred. This is

// Needed because Blocks store data on type.

// Needs a placement effect because the parent (the Suspense boundary) already

// Neither alternate was updated, which means the rest of the

// Neither child is smaller. Exit.

// Never force flush in production. This function should get stripped out.

// New behavior only for users of `prop-types` package

// New rows can't be content rows.

// Next replay any continuous events.

// Next we find the first one that isn't the same which should be the

// Next we need to figure out if the node that skipped past is

// Next we'll drill down this component to find the first HostComponent/Text.

// Next we're going to render the tail.

// Next we're simply going to delete all insertions after the

// No DevTools

// No boundary was found. Fallthrough to error mode.

// No catch in prod code path.

// No change

// No change. Bailout early if children are the same.

// No child. Traverse to next sibling.

// No effects.

// No implementation differences.

// No more siblings. Traverse up.

// No special behavior since these rules fall back to "in body" mode for

// Noop.

// Normalize SVG <use> element events #4963

// Normalize inconsistent values reported by browsers due to

// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`

// Normally portals handle their own events all the way down to the root.

// Normally the dispatch function for a state hook never changes,

// Normally we'd only need to check one of the fibers because if it

// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug

// Not currently showing content. Consult the Suspense context.

// Not sure about the optimal order of these conditions:

// Note that simple async functions are implemented on top of

// Note that the "rows" will be workInProgress, but any nested children

// Note that this only happens when part of the tree is rendered

// Note that this will happen even if batchedUpdates is higher up

// Note that this would throw on non-element objects.

// Note that we apply entanglements *after* checking for partial work above.

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// Note the use of `==` which checks for null or undefined.

// Note: At a later stage we can optimize this function as right now a hsl

// Note: During these life-cycles, instance.props/instance.state are what

// Note: It doesn't matter whether the component that suspended was

// Note: Memo only checks outer props here.

// Note: The following is done to avoid a v8 performance cliff.

// Note: These happen to have identical begin phases, for now. We shouldn't hold

// Note: This currently assumes there are no passive effects on the root fiber

// Note: We don't reset the actualTime counts. It's useful to accumulate

// Note: ["return"] must be used for ES3 parsing compatibility.

// Note: `option.selected` is not updated if `select.multiple` is

// Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.

// Note: memo() and forwardRef() we'll compare outer rather than inner type.

// Note: there is a special case that prevents it from being written to the DOM

// Note: these two variables *must* always be updated together.

// Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

// Note: we cannot null out sibling here, otherwise it can cause issues

// Nothing to do for these component types

// Nothing to do here. This is terminal. We'll do the completion step

// Nothing to hydrate. Make it an insertion.

// Noticeable Difference.

// Notify subscribers that it's completed.

// Now flush the immediate queue.

// Now push the new context and mark that it has changed.

// Now that all that's done, we can finally try to actually render the child component.

// Now that we know this function doesn't throw, replace it.

// Now that we've validated casing, do not validate

// Now we need to find it's corresponding host fiber in the other

// OK, the next part is confusing. We're about to reconcile the Suspense

// Observe all updates.

// Offscreen doesn't have the first render pass).

// Old behavior for people using React.PropTypes

// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support

// On some platforms, in particular some releases of Android 4.x,

// On the selectionchange event, the target is just document which isn't

// Once the update queue is empty, persist the derived state onto the

// Only bother fetching default value if we're going to use it

// Only decrement the outstanding interaction counts once.

// Only decrement the pending interaction count if we're done.

// Only fire when selection has actually changed.

// Only log here if componentDidCatch is the only error boundary method defined

// Only monitor this failure once because there tends to be a lot of the

// Only reset the updates from the queue if it has a clone. If it does

// Only set node.value if textContent is equal to the expected

// Only true when this component is being hot reloaded.

// Only updates at user-blocking priority or greater are considered

// Only upgrade once. This works even inside the render phase because

// Only warn for user-defined components, not internal ones like Suspense.

// Or it may be because it's older React where they're the same thing.

// Original props are copied

// Otherwise B has to be current branch.

// Otherwise effects in sibling components might interfere with each other.

// Otherwise reset hydration state in case we aborted and resumed another

// Otherwise, put this component's subscription instance into context, so that

// Otherwise, return to the parent

// Otherwise, the value attribute is synchronized to the property,

// Otherwise, we'll wait until after the passive effects are flushed.

// Otherwise, we're going to have to hide content so we should

// Our heuristic for that is whenever we enter a concurrent work loop.

// Our re-subscribe logic only runs when the store/subscription setup changes

// Parse the HTML and read it back to normalize the HTML string so that it

// Partial state object

// Pattern for numbers

// Perform work until Scheduler asks us to yield

// Placement

// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'

// Pop a row.

// Pop provider fiber

// Portal will bubble through to us.

// Portals are special because we don't append the children during mount

// Postfix always has precedence over any operator that follows after it

// Prefix to avoid chaos with special keys.

// Prevent bailout if the implementation changed due to hot reload.

// Prevent re-entrancy.

// Priority is insufficient. Skip this update. If this is the first

// Probably in the "in body" parsing mode, so we outlaw only tag combos

// Proceed under the assumption that this is a class instance

// Proceed under the assumption that this is a function component

// Process this update.

// Promote the fiber to a class and try rendering again.

// Prop type validation may throw. In case they do, we don't want to

// Propagate any mapState/mapDispatch errors upwards

// Protect against re-entrancy.

// Provide explicit error message when production+profiling bundle of e.g.

// Pull data from the store after first render in case the store has

// Push context providers early to prevent context stack mismatches.

// Push current root instance onto the stack;

// Push onto existing queue. Don't need to schedule a callback because

// Push this callback into an internal queue. We'll flush these either in

// Queue the event to be replayed later. Abort dispatching since we

// Rather than returning an object with a next method, we keep

// Re-create this selector whenever the store changes.

// React DevTools reads this flag.

// React Refresh

// React currently throws a warning when using useLayoutEffect on the server.

// React nodes in the future. We need to check this first because

// React v16.11 and below

// React v16.12 and above

// React$ElementType

// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,

// ReactFiberContext usually updates this cache but can't for newly-created instances.

// Read this again, since an effect might have updated it

// Received a ping at the same priority level at which we're currently

// Record a pending mutable source update with the same expiration time.

// Record the characters to be added to the DOM.

// Record the component responsible for creating this element.

// Record the render duration for the fiber that errored.

// Record the time spent rendering before an error was thrown. This

// Recursively delete all host nodes from the parent.

// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416

// Refs should update even if shouldComponentUpdate returns false

// Regardless of whether this script is executing as a CommonJS module

// Register pending interactions on the root to avoid losing traced interaction data.

// Regular boundaries always capture.

// Relationship Attributes

// Relies on `updateStylesByID` not mutating `styleUpdates`.

// Remaining cases are all treated as empty.

// Remaining properties are added to a new props object

// Remaining timers are pending.

// Remember the parent context so we can merge with it later.

// Remove any effects that were appended after this point.

// Remove nextEffect pointer to assist GC

// Remove our event listeners

// Removes undefined fields for cleaner css object.

// Renderers may schedule work to be done after host components are mounted

// Rendering at offscreen, so we can clear the base lanes.

// Replace the child/sibling pointers above it.

// Replace the dot at the beginning of the passed extension if one exists

// Replace the old (or empty) context with the new one.

// Represents whether effect should fire.

// Require an opening parenthesis

// Rerender

// Rerender the whole list, but this time, we'll force fallbacks

// Reserved names are extracted

// Reset a workInProgress child set to prepare it for a second pass.

// Reset effect durations for the next eventual effect phase.

// Reset module-level state that was set during the render phase.

// Reset regular expression object

// Reset the child fibers to their original state.

// Reset the durations from the first pass so they aren't included in the

// Reset the effect list before doing the second pass since that's now invalid.

// Reset the effect list to what it was before we rendered this

// Reset the effect tag but keep any Placement tags, since that's something

// Reset the effect tag.

// Reset the memoizedState to what it was before we attempted

// Reset the profiler timer.

// Reset the text content of the parent before doing any insertions

// Reset the work-in-progress list

// Reset this to null before calling lifecycles

// Reset to createFiber's initial values.

// Reset to the "together" mode in case we've started a different

// Reset to the cloned values that createWorkInProgress would've.

// Resets the replaying for this type of continuous event to no event.

// Resetting context._sent for legacy support of Babel's

// Resolve default props

// Resolve default props. Taken from ReactElement

// Resolved (SimpleMemoComponent has no defaultProps)

// Resolved for outer only

// Resolved props

// Restart from the root.

// Restart work from the new fiber.

// Restarting too aggressively is also not good because it starves out any

// Restore the context.

// Restore the original properties of the fiber.

// Resume execution at the desired location (see delegateYield).

// Resume flushing in the next tick

// Retaining it forever may interfere with GC.

// Rethrow this error instead of the original one.

// Retry if any event replaying was blocked on this.

// RetryLane even if it's the one currently rendering since we're leaving

// Return an iterator with no values.

// Return the exports of the module

// Return the line we found.

// Return to the normal work loop.

// Return whether there's additional work

// Returns a string that is postfixed to a warning about an invalid type.

// Returns class name of the object, if any.

// Returns the SuspenseInstance if this node is a direct child of a

// Returns whether passive effects were flushed.

// Reuse previous dependencies

// Revert the select back to its default unselected state.

// Run beginWork again.

// Run these checks in production only if the flag is off.

// SUSPENSE_x_START_DATA. Otherwise, null.

// SVG

// SVG-related properties

// Safari may fire events on text nodes (Node.TEXT_NODE is 3).

// Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:

// Safe because if current fiber exists, we are reconciling,

// Same as above

// SameValue algorithm

// Save references to the new child props.  Note that we track the "child props from store update"

// Schedule a Ref effect

// Schedule a callback to attempt replaying as many events as are

// Schedule a discrete update but only if it's not Sync.

// Schedule a force update on the work-in-progress.

// Schedule a new callback.

// Schedule a placeholder to display after a short delay, using the Just

// Schedule a timeout.

// Schedule an effect to clear this container at the start of the next commit.

// Schedule other updates after in case the callback is sync.

// Schedule the nearest Suspense to re-render the timed out view.

// Schedule this fiber to re-render at offscreen priority. Then bailout.

// Search parent A's child set

// Search parent B's child set

// Second is hydration. During hydration, the Suspense fiber has a slightly

// Second pass: Create new passive effects.

// Secondary renderers store their context values on separate fields.

// See `createPrimitiveTypeChecker`.

// See `requestUpdateLane` for explanation of `currentEventWipLanes`

// See discussion in https://github.com/facebook/react/pull/10676.

// See discussion in https://github.com/facebook/react/pull/6896

// See https://github.com/facebook/react/issues/11807

// See https://github.com/facebook/react/issues/12995

// See https://github.com/facebook/react/issues/13222

// See https://github.com/facebook/react/pull/19216.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// See rules for 'li', 'dd', 'dt' start tags in

// See the discussion in https://github.com/facebook/react/pull/11157.

// Seems redundant, but it changes the type from a single lane (used for

// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.

// Set `workInProgress` to null. This represents advancing to the next

// Set of currently traced interactions.

// Set the dispatcher in DEV because this might be call in the render function

// Set the remaining expiration time to be whatever is remaining in the queue.

// Set the return pointer of the child to the work-in-progress fiber.

// Set the return pointer of the sibling to the work-in-progress fiber.

// Set up refs to coordinate values between the subscription effect and the render logic

// Set up the Suspense Context to force suspense and immediately

// Setting a size greater than 1 causes a select to behave like `multiple=true`, where

// Setting context._sent for legacy support of Babel's

// Shallow cloning props works as a workaround for now to bypass the bailout check.

// Shift down to normal priority

// Should always be set

// Should be handled by findRetryLane instead

// Should be handled by findTransitionLane instead

// Should this check be gated by parent namespace? Not sure we want to

// Silently steal the ref from the parent.

// SimpleMemoComponent codepath doesn't resolve outer props either.

// Since nothing actually suspended, there will nothing to ping this

// Since nothing actually suspended, there will nothing to ping this to

// Since the old fiber is disconnected, we have to schedule it manually.

// Since these are SVG attributes, their attribute names are case-sensitive.

// Since this is conceptually a new fiber, schedule a Placement effect

// Since this wasn't the direct target of the event, we might have

// Since we already found a match, we can stop traversing the

// Since we don't keep a stack of them, we will search for it.

// Since we know we're in a React event, we can clear the current

// Since we yield every frame regardless, `requestPaint` has no effect.

// Since we're not hidden anymore, reset the state

// Since we're restarting, remove anything that is not a host effect

// Skip both NoWork and PerformedWork tags when creating the effect

// Skip key warning if the type isn't valid since our key validation logic

// Skip non-hydratable nodes.

// Skip past all nodes within this suspense boundary.

// Skip portals because commitUnmount() currently visits them recursively.

// Skip the primary children, and continue working on the

// Skip this if we're not updating due to sCU.

// Skipping one frame that we assume is the frame that calls the two.

// So if there are interleaved updates, they get pushed to the older queue.

// So we can clear these now to allow a new callback to be scheduled.

// So we can't tell if the event name is correct for sure, but we can filter

// So we preemptively throw with a better message instead.

// So we push an empty value first. This lets us safely unwind on errors.

// So we should be able to stop now. However, we don't know if this portal

// So we'll skip the misleading extra mismatch warning in this case.

// So we'll throw out the current work and restart.

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Some environments might not have setTimeout or clearTimeout.

// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.

// Some of these attributes can be hard to find. This list was created by

// Something in the return path also threw.

// Something in this boundary's subtree already suspended. Switch to

// Something might get unblocked by state updates or retries in the

// Something should be setting the props in the constructor.

// Something suspended. Re-render with the fallback children.

// Something went really wrong, and our event was not dispatched.

// Spec says something about storing a list of markers, but it sounds

// Special case: Sync React callbacks are scheduled on a special

// Special case: There's nothing to work on.

// Special cases

// Stack implementation injected by the current renderer.

// Start over from the beginning of the list

// Stash the eagerly computed state, and the reducer used to compute

// Stash the promise on the boundary fiber. If the boundary times out, we'll

// State object

// Still haven't timed out. Continue rendering the children, like we

// Store the current set of interactions on the FiberRoot for a few reasons:

// Store the unwrapped component in the type.

// Strictly speaking, seeing an <option> doesn't mean we're in a <select>

// String SVG attributes with the xlink namespace.

// String SVG attributes with the xml namespace.

// Submit/reset inputs need the attribute removed completely to avoid

// Support DevTools editable values for useState and useReducer.

// Support DevTools props for function components, forwardRef, memo, host components, etc.

// Support for module components is deprecated and is removed behind a flag.

// Suppress the error. It will throw again in the render phase.

// Suspense Heuristics

// SuspenseInstance. I.e. if its previous sibling is a Comment with

// SuspenseList doesn't actually catch anything. It should've been

// SuspenseList so that it can retry if they resolve.

// Sync the values needed by our subscription handler after each commit.

// Synchronously dispatch our fake event. If the user-provided function

// TODO (bvaughn) Replace this behavior with an invariant() in the future.

// TODO Clear this data once all pending hydration work is finished.

// TODO Ignore this error? Rethrow it?

// TODO This is only a temporary bandaid for the old reconciler fork.

// TODO We're reading the store directly in render() here. Bad idea?

// TODO: Add more comments

// TODO: Because we don't have a work-in-progress, this will add the

// TODO: Better heuristic.

// TODO: Clean this up once we turn on the string ref warning for

// TODO: Consider calling `unwindWork` to pop the contexts.

// TODO: Consider not doing this for input and textarea.

// TODO: Consider unifying this with how the root works.

// TODO: Consider warning about bad polyfills

// TODO: Consider warning in this path if a fallback timer is not scheduled.

// TODO: Defer siblings if we're not at the right index for this slot.

// TODO: Disabled elements should not respond to mouse events

// TODO: Distinguish by namespace here -- for <title>, including it here

// TODO: Does this work for all element types? What about MathML? Should we

// TODO: Don't need to accumulate this. Instead, we can remove

// TODO: Don't need to accumulate this. Instead, we can remove renderLanes

// TODO: Drop this when these are no longer allowed as the type argument.

// TODO: Ensure that an update gets scheduled if any of the special props

// TODO: Expiration heuristic is constant per lane, so could use a map.

// TODO: Figure out what we should do in Blocking mode.

// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.

// TODO: Find a more efficient way to do this.

// TODO: For the shouldClone case, this could be micro-optimized a bit by

// TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.

// TODO: Handle wasCustomComponentTag

// TODO: I found and added this missing line while investigating a

// TODO: I think this is now always non-null by the time it reaches the

// TODO: If deps are provided, should we skip comparing the ref itself?

// TODO: If key === null and child.key === null, then this only applies to

// TODO: If this is a HostRoot we might want to bail out.

// TODO: If this is the first discrete event in the queue. Schedule an increased

// TODO: If we're rendering sync either due to Sync, Batched or expired,

// TODO: If workInProgress.child is null, we can continue on the tail immediately.

// TODO: Is the JND optimization worth the added complexity? If this is

// TODO: Lol maybe there's a better way to factor this besides this

// TODO: Make sure that we check isMounted before firing any of these events.

// TODO: Make sure this doesn't override pings that happen while we've

// TODO: Make sure we check if this is still unmounted or do any clean

// TODO: Might be better if `flushPassiveEffects` did not automatically

// TODO: Move createInstance to beginWork and keep it on a context

// TODO: Move out of the loop. This only happens for the first run.

// TODO: Move the reset at in beginWork out of the common path so that

// TODO: Move this and createInstance step into the beginPhase

// TODO: Move this check out of the hot path by moving `resetChildLanes`

// TODO: Move this out of the hot path using a dedicated effect tag.

// TODO: Not sure if this is the desired semantics, but it's what we

// TODO: Once it's just Fiber we can move this to node._wrapperState

// TODO: Only do this for the relevant Safaris maybe?

// TODO: Only ignore them on controlled tags.

// TODO: Only schedule updates if these values are non equal, i.e. it changed.

// TODO: Pass `current` as argument

// TODO: Possibly defer this until the commit phase where all the events

// TODO: Probably should inline this back

// TODO: Probably should refactor `beginWork` to split the bailout

// TODO: Remove support for `selected` in <option>.

// TODO: Remove this dependency on the Scheduler priority.

// TODO: Reset this somewhere else? Lol legacy mode is so weird.

// TODO: Restructure so we never read values from the instance.

// TODO: Scheduler no longer requires these methods to be polyfilled. But

// TODO: Should be able to flush inside batchedUpdates, but not inside `act`.

// TODO: Should not remove render lanes that were pinged during this render

// TODO: Should probably move the bulk of this function to commitWork.

// TODO: Should warn in effects and callbacks, too

// TODO: Should we use domElement.firstChild.nodeValue to compare?

// TODO: Special case idle priority?

// TODO: Split the update API as separate for the props vs. children.

// TODO: Temporary. We're removing the concept of discrete updates.

// TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.

// TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.

// TODO: The Profiler fiber shouldn't have a type. It has a tag.

// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

// TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.

// TODO: Theoretically, any update to any lane can unblock any other lane. But

// TODO: These should not need a type.

// TODO: This assumes that we're about to evaluate the component and process

// TODO: This breaks on empty slots like null children. That's

// TODO: This cast may not be sound for SVG, MathML or custom elements.

// TODO: This function shares a lot of logic with attemptToDispatchEvent.

// TODO: This gets called every time we yield. We can optimize by storing

// TODO: This is related to `act`, not events. Move to separate key?

// TODO: This prevents the assignment of defaultValue to regular

// TODO: This will still suspend a synchronous tree if anything

// TODO: Type this specific to this type of component.

// TODO: Upgrade this definition once we're on a newer version of Flow that

// TODO: Use an effect tag.

// TODO: Use invariant so the message is stripped in prod?

// TODO: Use symbols?

// TODO: Warn if _enabled is false.

// TODO: Warn if there is more than a single textNode as a child.

// TODO: Warn in a future release.

// TODO: Warn in strict mode if getDerivedStateFromError is

// TODO: Warn, we didn't find the end comment boundary.

// TODO: Warn.

// TODO: We can probably just avoid popping it instead and only

// TODO: We could fast path by just rendering the tail now.

// TODO: We should probably always mark the root as suspended immediately

// TODO: Without `any` type, Flow says "Property cannot be accessed on any

// TODO: add a more generic warning for invalid values.

// TODO: can we stop exporting these?

// TODO: figure out the API for cross-renderer implementation.

// TODO: findDOMNode doesn't rely on this any more but isMounted does

// TODO: ideally, we'd eventually add all events from

// TODO: ideally, we'd eventually apply the same logic to all

// TODO: if it was but can no longer be simple,

// TODO: pass ReactDOM portal implementation as third argument

// TODO: popHydrationState

// TODO: remove top-level side effect.

// TODO: replaying capture phase events is currently broken

// TODO: requestUpdateLanePriority also reads the priority. Pass the

// TODO: revisit this when we implement resuming.

// TODO: this is special because it gets imported during build.

// TODO: this seems like it could cause a DEV-only throw for hydration

// TODO: throw or warn if we couldn't hydrate?

// TODO: we should remove the concept of a "SimpleEventPlugin".

// TODO: why is this nullable in the types but we read from it?

// Tab or newline are defined as \r\n\t:

// Tag is either LegacyRoot or Concurrent Root

// Tag the fiber with an update effect. This turns a Placement into

// Tell Scheduler to yield at the end of the frame, so the browser has an

// Test for A's keys different from B.

// Text nodes don't have keys. If the previous node is implicitly keyed

// That happens in the completeWork phase without going back to beginWork.

// That indicates that we are waiting for suspense data.

// That is depending on if we want nested subtrees (layers) to bubble

// That would cause this tear check to throw again and eventually be visible to the user.

// That's probably okay; we don't support it just as we don't support

// The ._invoke method unifies the implementations of the .next,

// The ChangeEventPlugin registers a "propertychange" event for

// The Suspense Context is split into two parts. The lower bits is

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol

// The `start` method can be stored on a ref, since `setPending`

// The actual logic for this is spread out in different places.

// The actual meaning of the value depends on the users' keyboard layout

// The algorithm for assigning an update to a lane should be stable for all

// The alternative is to track the namespace in a few places which is convoluted.

// The assumption is that this is usually faster.

// The attribute name is case-sensitive in SVG so we can't just use

// The below logic attempts to work out if we need to change

// The boundary fiber (a Suspense component or SuspenseList component)

// The callback errored, but the error event never fired.

// The child props selector needs the store reference as an input.

// The commit phase is broken into several sub-phases. We do a separate pass

// The context might have changed so we need to recalculate it.

// The context value changed. Search for matching consumers and schedule

// The context.catch method must only be called with a location

// The current composition is stored statically and must not be

// The current task was canceled. Exit. We don't need to call

// The current tree is not already showing a fallback.

// The current, flushed, state of this fiber is the alternate. Ideally

// The default reveal order is the same as not having

// The delegate iterator is finished, so forget it and continue with

// The effect list is no longer valid.

// The effect list of the backwards tail will have been added

// The enter-key is technically both printable and non-printable and can

// The error is recoverable and was silenced.

// The existing first child is not a text node so we need to create one

// The fallback fiber was added as a deletion effect during the first pass.

// The first pass splits the children fibers into two sets. A head and tail.

// The first phase a "before mutation" phase. We use this phase to read the

// The following switch statement is only concerned about placement,

// The inner type can have defaults too

// The instance needs access to the fiber so that it can schedule updates

// The last rebase update that is NOT part of the base state.

// The logic below for Context differs depending on PROD or DEV mode. In

// The module cache

// The new fiber is a work in progress, but if there exists a

// The next one that isn't the same should be our match though.

// The next phase is the layout phase, where we call effects that read

// The next phase is the mutation phase, where we mutate the host tree.

// The old behavior was using the priority level of the Scheduler.

// The only remaining work is Idle.

// The parent is larger. Swap positions.

// The parent is smaller. Exit.

// The pending lanes were cleared at the beginning of beginWork. We're

// The pending queue is circular. Disconnect the pointer between first

// The primary child fragment does not have pending work marked

// The primary children do not have pending work with sufficient

// The primary children have pending work. Use the normal path

// The priority changed. Cancel the existing callback. We'll schedule a new

// The priority hasn't changed. We can reuse the existing task. Exit.

// The props argument to `createWorkInProgress` is `any` typed, so we use this

// The queue doesn't persist past this render pass.

// The queue is currently empty, which means we can eagerly compute the

// The queue of discrete events to be replayed.

// The react-debug-hooks package injects its own implementation

// The render included lanes that were updated during the render phase.

// The render is suspended, it hasn't timed out, and there's no

// The require function

// The resolved type is set if we know what the final type will be. I.e. it's not lazy.

// The rest are treated as attributes with special cases.

// The rest of this function is a fork of `updateClassComponent`

// The result can be nullish if a mock or a custom function is used.

// The return pointer of A and the return pointer of B point to different

// The return pointers point to the same fiber. We'll have to use the

// The root already suspended with a delay, which means this render

// The root entry object (effectively a try statement without a catch

// The root previous suspended and scheduled a timeout to commit a fallback

// The same thing applies to Suspense boundaries.

// The second renderer don't know that it needs to reset the WIP version during unwind,

// The source fiber did not complete.

// The source fiber did not complete. Mark it with Sync priority to

// The suspended lanes are no longer CPU-bound. Clear their expiration times.

// The target is a portal, but it's not the rootContainer we're looking for.

// The theory is that a person can't tell the difference between small differences in time.

// The time it took to render last row is greater than the remaining

// The trick we use is to cache the first of each of these inputs within an

// The validation flag is currently mutative. We put it on

// The wakeable resolved, so we no longer need to memoize, because it will

// The whole list is part of the tail.

// The work completed. Ready to commit.

// The work expired. Commit immediately.

// The work loop is an extremely hot path. Tell Closure not to inline it.

// The work-in-progress fiber. I've named it differently to distinguish it from

// The work-in-progress queue is the same as current. This happens when

// The work-in-progress tree is now the current tree. This must come after

// Then we can remove this special list.

// There are no base updates.

// There are working polyfills for <dialog>. Let people use it.

// There is no alternate. This is an unusual case. Currently, it only

// There is no effect on the root.

// There might be multiple of these in the list but since we're

// There might be nested nodes so we need to keep track of how

// There were render phase updates. These are only valid for this render

// There's a partial tree, and at least one of its lanes has expired. Finish

// There's additional work on this root.

// There's already a work-in-progress. Reuse it.

// There's no need to check for keys on text nodes since we don't have a

// There's no need to search deeper because for the purpose of giving

// Therefore we need to go through the whole tail to find if

// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable

// These are "enumerated" HTML attributes that accept "true" and "false".

// These are "enumerated" SVG attributes that accept "true" and "false".

// These are HTML attributes that are "overloaded booleans": they behave like

// These are HTML attributes that must be numbers.

// These are HTML attributes that must be positive numbers.

// These are HTML boolean attributes.

// These are circular

// These are reserved SVG and MathML elements.

// These are reset during render to allow the DevTools commit hook a chance to read them,

// These are set right before calling the component.

// These are the few React props that we set as DOM properties

// These attribute exists both in HTML and SVG.

// These effects should only be committed when components are first mounted,

// These particular numbers are vague estimates. We expect to adjust them based on research.

// These props are reserved by React. They shouldn't be written to the DOM.

// These set relatedTarget to null because the replayed event will be treated as if we

// These tags are only valid with a few parents that have special child

// These values may change as we process the queue.

// These will be overridden during the parent's reconciliation

// Third, even if you set all that aside, Suspense is like error boundaries in

// This API will tag the children with the side-effect of the reconciliation

// This Fiber's initial properties will always be overwritten.

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This allows us to reset root when portals are popped.

// This approach works across all browsers, whereas `change` does not fire

// This avoids unnecessarily recomputing memoized values.

// This behavior/bug has something to do with Object.preventExtension().

// This boundary already captured during this render. Continue to the next

// This branch is reachable if the render phase is impure.

// This can be replaced with a WeakMap once they are implemented in

// This can end up rendering this component multiple passes.

// This can happen if you passed a class to function component, or non-function.

// This can happen when we abort work.

// This can lead to tearing in the first renderer when it resumes,

// This check uses currentHook so that it works the same in DEV and prod bundles.

// This code is DEV-only so size is not a concern.

// This commit has passive effects. Stash a reference to them. But don't

// This component has already been unmounted.

// This container might be used for a portal.

// This could change in the future.

// This could've been outside the flag but I put it inside to reduce risk.

// This couples React to the Scheduler internals, so we're replacing it

// This dispatcher does that.

// This dispatcher handles an edge case where a component is updating,

// This element was passed in a valid location.

// This enables DevTools to start capturing timing at any point–

// This enables us to pop only Fibers that provide unique contexts.

// This ensures that the version used for server rendering matches the one

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This environment has a native %IteratorPrototype%; use it instead

// This error was thrown as a convenience so that if you enable

// This error was thrown as a convenience so that you can use this stack

// This extracts the first frame from the sample that isn't also in the control.

// This fiber did not complete because something threw. Pop values off

// This fiber does not have any pending work. Bailout without entering

// This fiber doesn't have work, but its subtree does. Clone the child

// This finds the most significant non-zero bit.

// This first principle is that if we're going to suspend when we complete

// This function detects when a Suspense boundary goes from visible to hidden.

// This function is fork of reconcileChildren. It's used in cases where we

// This function is not recursive.

// This function is used both for updates and for re-renders triggered by a

// This gets reset before we yield back to the browser.

// This handles more types than `getPropType`. Only used for error messages.

// This handles the case of React rendering into a container with previous children.

// This handles the special case of a mutable source being shared between renderers.

// This happens if `finalizeInitialChildren` returns `true` (which it

// This has now been refined to a text node.

// This has now been refined to an element node.

// This has the downside of resetting values for different priority renders,

// This hook is normally a no-op.

// This is a CPU-bound tree. Skip this tree and show a placeholder to

// This is a breaking change that can wait until React 18.

// This is a constructor function, rather than a POJO constructor, still

// This is a consumer

// This is a delayed task.

// This is a exponential search for each boundary that commits. I think it's

// This is a fork of `requestUpdateLane` designed specifically for Suspense

// This is a fork of runWithPriority, inlined for performance.

// This is a known bug.

// This is a lazy pooled frozen object, so we need to initialize.

// This is a legacy edge case. The initial mount of a ReactDOM.render-ed

// This is a list of all SVG attributes that need special casing, namespacing,

// This is a mapping from React prop names to the attribute names.

// This is a move.

// This is a new mount or this boundary is already showing a fallback state.

// This is a new mount. Change the tag so it's not mistaken for a

// This is a polyfill for %IteratorPrototype% for environments that

// This is a re-render. Apply the new render phase updates to the previous

// This is a render phase update. Stash it in a lazily-created map of

// This is a special case that only exists for legacy mode.

// This is a special case. If any listener updates we need to ensure

// This is a transition, so we should exit without committing a

// This is a wakeable.

// This is also our approach for IE handling, for the reason above.

// This is always exactly one child

// This is always non-null on a ClassComponent or HostRoot

// This is an array for better minification.

// This is an insertion or in-progress hydration. The nearest possible

// This is an insertion.

// This is because we only process these plugins

// This is because we only process this plugin

// This is called right before React yields execution, to ensure `readContext`

// This is exported in FB builds for use by legacy FB layer infra.

// This is going to find the last row among these children that is already

// This is guaranteed to yield a script element.

// This is handy for testing error boundaries without noise.

// This is in postMount because we need access to the DOM node, which is not

// This is inlined manually because closure doesn't do it for us.

// This is intentionally a factory so that we have different returned constructors.

// This is intentionally an invariant that gets caught. It's the same

// This is intentionally written as a list of all properties.

// This is kind of an edge case.

// This is not a transition, but we did trigger an avoided state.

// This is not replayable so we'll invoke it but without a target,

// This is only necessary when a select in "single selection mode".

// This is simpler for the single child case. We only need to do a

// This is so gross but it's at least non-critical and can be removed if

// This is split into a separate function so we can mark a fiber with pending

// This is the basic functionality of the event system. All

// This is the beginning of the main content.

// This is the entry point for every concurrent task, i.e. anything that

// This is the entry point for synchronous tasks that don't go

// This is the first dependency for this component. Create a new list.

// This is the first hook in the list

// This is the first hook in the list.

// This is the first update since React yielded. Compute a new start time.

// This is the first update. Create a circular list.

// This is the result of a discrete event. Track the lowest priority

// This is the rootContainer we're looking for and we found it as

// This is the same implementation as reconcileChildrenArray(),

// This is used by DevTools to force a boundary to suspend.

// This is used to create an alternate fiber to do work on.

// This is used to make sure we don't warn about the same

// This is why we ensure that non React root containers have inline onclick

// This isn't a real property on the hook, but it can be set to opt out

// This isn't directly used but is handy for debugging internals:

// This lane expired

// This leads to an ambiguity between <>{[...]}</> and <>...</>.

// This matches the property of native CompositionEventInterface.

// This may be because it's a Context (rather than a Consumer).

// This may be unset if the props are determined to be equal later (memo).

// This may change in the future with e.g. nested hooks.

// This may trigger infinite loops if componentWillReceiveProps calls setState.

// This means both of them need to be registered to preserve state.

// This means that if a lane is entangled during an interleaved event while

// This method must not throw, or React internal state will get messed up.

// This might have been modified.

// This might seem like it belongs on progressedFirstDeletion. However,

// This mirrors the code path above, but runs for hydration too.

// This module is forked in different environments.

// This module should not be running in strict mode, so the above

// This needs to be fixed in getComponentName so that it relies on the tag

// This prevents time from endlessly accumulating in new commits.

// This prevents:

// This render only included retries, no updates. Throttle committing

// This resets the Fiber to what createFiber or createWorkInProgress would

// This returns the highest priority pending lanes regardless of whether they

// This returns the priority level computed during the `getNextLanes` call.

// This should be fine because the only two other things that contribute to

// This should never happen. (Would happen if the anchor/focus nodes aren't

// This should only be reachable if we're suspended

// This should throw.

// This shouldn't be reachable, but as a fallback, return the entire bitmask.

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This shouldn't happen, something went wrong but to avoid blocking

// This tag allow us to uniquely identify this as a React Portal

// This tag allows us to uniquely identify this as a React Element

// This tag is not present in non Electron environments such as JSDom which

// This target container was successfully dispatched. Try the next.

// This this to be replayed later once the target is available.

// This tracks which mutable sources need to be reset after a render.

// This tree has been unmounted already. Dispatch without a target.

// This update does have sufficient priority.

// This update is going to be committed so we never want uncommit

// This warning would fire if you read context inside a Hook like useMemo.

// This will be the props with resolved defaultProps,

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// This will restart the begin phase with a new fiber.

// This will throw if radio buttons rendered by different copies of React

// This won't trigger the performance cliff mentioned above,

// This would be a good time to rethrow if any of the event handlers threw.

// This wrapper function gets inlined. Only exists so to communicate that it

// Throw out any hooks that were used.

// Timed out.

// Timer fired. Transfer to the task queue.

// Timer was cancelled.

// Times out immediately

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// To avoid creating an additional object, we just hang the .value

// To avoid side effects (such as losing text selection), only set value if changed

// To do that, we're replacing it with an update lane priority.

// To do this, we're going to go through the reconcile algorithm twice. In

// To ensure consistency across multiple updates in the same event, this should

// To figure out which ancestor instance we should use, we traverse

// To get around it, we can conditionally useEffect on the server (no-op) and

// To maintain the wrapperProps object reference, memoize this destructuring.

// To make comparing ReactElements easier for testing purposes, we make

// To preserve the expected "Pause on exceptions" behavior, we don't use a

// To preserve the preexisting retry behavior of error boundaries,

// To use getAttributeNS we need the local name which we don't have

// To work around this, initialize the fields below with doubles.

// Touch keyboard of Windows.  In such a case, the `char` property

// Track the context and the Fiber that provided it.

// Track the current IME composition status, if any.

// Track the input node that has focus.

// Track whether we've ever handled a keypress on the space key.

// Tracks components we have already warned about.

// Transfer time spent rendering these children so we don't lose it

// Transition to the next state.

// Tricky logic here:

// Trust the developer to only use possibleRegistrationNames in true

// Try to search down until we find one.

// Try to unify them. It's a bit tricky since it would require two return

// Try/catch helper to minimize deoptimizations. Returns a completion

// Turns 0b1000 into 0b0111

// Two elements created in two different places should be considered

// Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js

// Typically this will be the root most one. However, stack frames may be

// UNSAFE_ ones before the deprecated ones, since they'll be 'louder'

// Unfortunately it makes React unusably slow for some applications.

// Unknown attributes should have lowercase casing since that's how they

// Unless the render was suspended or cascading work was scheduled,

// Unlike the class check below, it's not enforced in production for perf.

// Unmount

// Unmount should not be batched.

// Unmount the root by rendering null.

// Unsafe lifecycles should not be invoked for components using the new APIs.

// Unset styles on `lastProp` but not on `nextProp`.

// Unsuspend any update at equal or lower priority.

// Unwind the failed stack frame

// Update

// Update after calling subscribers in case of error.

// Update checked *before* name.

// Update pending async counts for all wrapped interactions.

// Update render duration assuming we didn't error.

// Update styles that changed since `lastProp`.

// Update the child lanes of all the ancestors, including the alternates.

// Update the existing instance's state, props, and context pointers even

// Update the fiber if the keys match, otherwise return null.

// Update the first and last pending times on this root. The new first

// Update the next thing we're working on in case something throws.

// Update the pending async work count for previously unscheduled interaction.

// Update the pending async work count for the current interactions.

// Update the props handle so that we know which props are the ones with

// Update the remaining priority in the queue.

// Update the source fiber's lanes

// Update the wrapper around inputs *after* updating props. This has to

// Use the `click` event to detect changes to checkbox and radio inputs.

// Use the latest known implementation.

// Use this function to schedule a task for a root. There's only one task per

// Use this to detect multiple renderers using the same context

// Use this to track whether the error event is ever called.

// Used by getHighestPriorityLanes and getNextLanes:

// Used by persistent updates

// Used by renderers to avoid bundling object-assign twice in UMD bundles:

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Used for hot reloading:

// Used for stashing WIP properties to replay failed work in DEV.

// Used to detect multiple renderers using the same mutable source.

// Used to reuse a Fiber for a second pass.

// Used to track how many concurrent renderers this context currently

// User-originating errors (lifecycles and refs) should not interrupt

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an

// Usually the current owner is the offender, but if it accepts children as a

// V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.

// Validate that the properties correspond to their expected values.

// Verify deps, but only on mount to avoid extra checks.

// Visit children because portals might contain host components.

// Visit children because they may contain more composite or host nodes.

// Visit children because we may find more host components below.

// Visit this fiber.

// Wait to do this until after remaining work has been scheduled,

// Walk in lockstep until we find a match.

// Walk the parent path to the root and update the child expiration time.

// Warn about invalid children here so that client and hydration are consistent.

// Warn about these lifecycles if they are present.

// Warn about using Maps as children

// Warn when a known attribute is a bad type

// Warn when passing the strings 'false' or 'true' into a boolean prop

// We allow auto-mocks to proceed as if they're returning null.

// We already have an alternate.

// We already have an existing node so let's just update it and delete

// We also skip portals because they are not part of this host tree.

// We are done with the effect chain at this point so let's clear the

// We aren't actually adding an update to the queue,

// We assume pendingProps, index, key, ref, return are still untouched to

// We assume that prepareToHydrateHostTextInstance is called in a context where the

// We avoid inlining this to avoid potential deopts from using try/catch.

// We can accumulate the flags, and the targetContainers, and

// We can always overwrite an existing timestamp because we prefer the most

// We can assume the previous dispatcher is always this one, since we set it

// We can avoid this infinite loop by explicitly marking the source as dirty.

// We can delete this special case once the new fork is merged.

// We can re-use it in hot functions like performConcurrentWorkOnRoot()

// We can reset these now that they are finished.

// We can reuse the existing object from previous renders.

// We can use any RetryLane even if it's the one currently rendering

// We can't rely on the event system being injected on the server.

// We can't schedule any follow up work for the root because the fiber is already unmounted,

// We check for window.hasOwnProperty('event') to prevent the

// We construct a different control for this case to include any extra

// We could also eagerly patch the method.

// We could check it early to avoid scheduling an unnecessary callback.

// We could have created a separate document here to avoid

// We could move it there, but we'd still need this for lazy code path.

// We could update instance props and state here,

// We could've passed this the first time

// We create tags in the namespace of their parent container, except HTML

// We currently set sibling to null and index to 0 here because it is easy

// We didn't find a boundary that could handle this type of exception. Start

// We do an initial pass to gather component names

// We don't currently have a way to increase the priority of

// We don't do anything in this mode.

// We don't expect any of the above to throw, but better to be safe.

// We don't have to traverse to the children of the list since

// We don't mind this list too much because we expect it to never grow.

// We don't process these events unless we are in the

// We don't support rendering Generators because it's a mutation.

// We don't want exception behavior to differ between dev and prod.

// We eagerly listen to this even though we haven't committed yet.

// We either have an infix or postfix operator (they should be mutually exclusive)

// We expect at least one stack frame to be shared.

// We explicitly want to coerce to number here if possible.

// We first render the head. If anything is in fallback state, we do another

// We found a suspense instance. That means that we haven't

// We got a match.

// We had an attribute but shouldn't have had one, so read it

// We have a match. This only drills down to the closest host components.

// We have a queue to process.

// We have already passed our CPU deadline but we still have rows

// We have an acceptable loading state. We need to figure out if we

// We have new updates that haven't been processed yet.

// We have no life-cycles associated with portals.

// We have now passed our CPU deadline and we'll just give up further

// We have successfully injected, so now it is safe to set up hooks.

// We immediately remove the callback from event listeners so that

// We initialize the default updater but the real one gets injected by the

// We intentionally don't use spread (or .apply) directly because it

// We intentionally fallthrough here if enableBlocksAPI is not on.

// We intentionally reset, rather than copy, actualDuration & actualStartTime.

// We just rendered the head.

// We listen to these events in case to ensure emulated bubble

// We listen to this event in case to ensure emulated bubble

// We matched the next one, we'll now assume that the first one was

// We matched the slot, but we didn't reuse the existing fiber, so we

// We may still have similar intermediate frames from the construct call.

// We memoize the elements for the rendered child component as an optimization.

// We might bail out of the loop before finding any but that

// We need this to execute synchronously every time we re-render. However, React warns

// We need to check all keys in case some are required but missing from

// We need to clear only if we didn't queue because

// We need to delete the row we just rendered.

// We need to temporarily unset name to avoid disrupting radio button groups.

// We need update the tracked value on the named cousin since the value

// We no longer need to track the active instance fiber

// We now have a consistent tree. Because this is a sync render, we

// We now have a consistent tree. The next step is either to commit it,

// We only do this deeper than head and body since they tend to have random

// We only expect a wrapped function to be executed once,

// We only have the top Fiber that was created but we need recurse down its

// We only have the top Fiber that was deleted but we need to recurse down its

// We only have the top Fiber that was inserted but we need to recurse down its

// We only use a Fiber to ensure the same hidden class so DEV isn't slow.

// We only want to warn if we're sure it's a new React.

// We perform this translation at the end of the event loop so that we

// We pick a train model where the next boundary commits at a consistent schedule.

// We push the context as early as possible to ensure stack integrity.

// We record this information as an expando on the error.

// We scheduled a timeout but it's no longer needed. Cancel it.

// We should have already attempted to retry this tree. If we reached

// We should never have an alternate for any mounting node. So the only

// We should not delegate these events to the container, but rather

// We should only process this nativeEvent if we are processing

// We should only use this function for:

// We should prefer to render the fallback of at the last

// We show the whole stack but dedupe on the top component's name because

// We special case a direct text child of a host node. This is a common

// We still have tail rows to render.

// We successfully dispatched this event.

// We suspended during the head. We want to show at least one

// We treat the ambiguous cases above the same.

// We tried to use Object.assign() instead but this is called in

// We use a double buffering pooling technique because we know that we'll

// We use a throwing setter instead of frozen or non-writable props

// We use the prefix to ensure our stacks line up with native stack frames.

// We use these fields to store the result.

// We use this as a heuristic. It's based on intuition and not data so it

// We use this when assigning a lane for a transition inside

// We want to capture the wrapper props and child props we used for later comparisons

// We want to ensure that a "busy" state doesn't get force committed. We want to

// We want to match the production code behavior (which will use HooksDispatcherOnMount),

// We warn in this case but don't throw. We expect the element creation to

// We warn when you define propTypes on lazy()

// We weren't previously hidden, and we still aren't, so there's nothing

// We will invalidate the child context in finishClassComponent() right after rendering.

// We will reassign it back when we pop the portal on the way up.

// We will still patch up in this case but not fire the warning.

// We'd like to remove this but it's not clear if this is safe.

// We'll add them to the base queue.

// We'll check if this is a container root that could include

// We'll do the same for `currentEventPendingLanes` below.

// We'll get a different iterator later for the main pass.

// We're about to bail out, but we need to push this to the stack anyway

// We're at the root.

// We're back to the root of this subtree. Exit.

// We're blocked on hydrating this boundary.

// We're deeper than the current hydration context, inside an inserted

// We're done.

// We're going to commit this fiber even though it didn't complete.

// We're going to find the first row that has existing content.

// We're going to render them separately later.

// We're going to search forward into the tree until we find a sibling host

// We're not blocked on anything.

// We're not inside React, so we may be in the middle of a browser event.

// We're running in the default, "independent" mode.

// We're still blocked.

// We're still blocked. Try again later.

// We're unblocked.

// We've determined that A is the current branch.

// We've determined that B is the current branch.

// We've just hydrated. No need to hydrate again.

// We've reached the end of the new children. We can delete the rest.

// We've reached the root.

// We've successfully replayed the first event. Let's try the next one.

// Webkit offers a very useful `textInput` event that can be used to

// What we need to determine is if there are any hooks that already

// When a checked radio tries to change name, browser makes another radio's checked false.

// When a store is created, an "INIT" action is dispatched so that every

// When a yielded Promise is resolved, its final value becomes

// When adding attributes to the HTML or SVG allowed attribute list, be sure to

// When adding attributes to this list, be sure to also add them to

// When adding new symbols to this file,

// When an interaction goes out of scope, the previous set (if any) is restored.

// When blurring, set the value attribute for number inputs

// When legacyFBSupport is enabled, it's for when we

// When suspending, we should always exclude lanes that were pinged or (more

// When syncing the checked attribute, both the checked property and

// When syncing the checked attribute, it only changes when it needs

// When syncing the value attribute, the value comes from a cascade of

// When syncing the value attribute, the value property should use

// When this becomes current, the previous queue and dispatch method will be discarded,

// When we go into a portal, it becomes the parent to remove from.

// When we go out of the portal, we need to restore the parent.

// When we try rendering again, we should not reuse the current fiber,

// Whether or not it would crash later, we want to show a good message in DEV first.

// Which might result in "SecurityError" DOM Exception and it is compatible to Safari.

// While we're inside a removed host node we don't want to call

// Widget Attributes

// Within the body of any async function, `await x` is transformed to

// Without some nodes in the tree having empty base times.

// Without this first invariant, passing a non-DOM-component triggers the next

// Work in progress (ex: onload events in incremental mode).

// Work in progress.

// Worst case the selector will throw again and then an error boundary will handle it.

// Yield after `yieldInterval` ms, regardless of where we are in the vsync

// Yielding to the browser will give it a chance to paint, so we can

// `act` testing API

// `charCode` is the result of a KeyPress event and represents the value of

// `ensureRootIsScheduled` because the check above implies either that

// `expectedStyle` to a temporary DOM node to read its `style` attribute

// `flushDiscreteUpdates` starts a useless render pass which may cancels

// `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which

// `form.getElementsByName`, but that will only return direct children

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.

// `isInputPending` is not available. Since we have no way of knowing if

// `keyCode` is the result of a KeyDown/Up event and represents the value of

// `nativeEventTarget` is probably a window object.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

// `preventDefault()` in window `error` handler.

// `requestUpdateLane`. We assume it's the same as the root being updated,

// `toString`ed by IE8/9.

// `which` is an alias for either `keyCode` or `charCode` depending on the

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// a 'shared' variable that changes when act() opens/closes in tests.

// a PlacementAndUpdate.

// a batch. This is intentionally inside scheduleUpdateOnFiber instead of

// a better way to communicate whether this was a miss or null,

// a boundary.

// a child. Since we want to append the update only to the work-in

// a compiler or we can do it manually. Helpers that don't need this branching

// a fallback, then we should always suspend/restart. Transitions apply

// a global event handler. But because the error happens in a different

// a host component or host text.

// a nested suspense boundary within it. So we can use this as a fast

// a new mount, even though an empty version of it already committed.

// a non-delegated event.

// a parent of the Portal. That means we can ignore it because the

// a property called "_context", which also gives us the ability to check

// a push/pop misalignment.

// a root other than sync.

// a root, then we should also restart if we get an update or ping that

// a scheduled timeout.

// a stack.

// about to bail out, but there might be other lanes that weren't

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// accidentally pass it on to the delegate.

// achromatic

// active and not passive.

// acts like a "thread ID" here).

// actual time across multiple render passes.

// actually inside the passed-in node.)

// additional work on this root is scheduled.

// affecting the algorithms where its used. Here I'm using

// after each key entry. The selection changes after keydown and before

// after first render to prevent infinite render phase updates.

// after we rerender. This is used as a helper in special cases

// again and the nodes are still in the host tree so these will be

// again. This is the same as context updating.

// aka when there is no current/alternate.

// all except special table nodes which cause bad parsing behavior anyway.

// all lifecycle effect tags.

// all pending updates are included. If it still fails after the second

// all previous Promises have been resolved before calling invoke,

// allow <SVG> or <mATH>.

// allow detectFactoryAndVerify to get ownProps

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// almost identical to the logic used in the normal update path,

// already cloned. In legacy mode, the only case where this isn't true is

// already have an existing method we want to call, so there's no need

// already started rendering.

// also add them to this module to ensure casing and incorrect name

// also ensures that the minifier will not anonymize the function.

// also have been non-React nodes. We need to answer which one.

// always receive the correct fiber here

// an external backing store so that we can freeze the whole object.

// an immutable object with a single mutable value

// an isolated frame and process.

// ancestor components re-render before descendants

// ancestor path already has sufficient priority.

// and .done properties off the next function object itself. This

// and a handler for that event throws. We should be resilient to most of

// and any newline or tab are filtered out as if they're not part of the URL.

// and apply the stashed updates on top of the work-in-progress hook.

// and both offsets 0, in which case we will have handled above.

// and delete the existing ones.

// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240

// and don't track value will cause over reporting of changes,

// and eligible for a replay.

// and have the same names are omitted, just like in the HTML attribute filter.

// and https://github.com/facebook/react/issues/14239

// and improve init perf of processing this array, as it will

// and isMounted is deprecated anyway so we should be able to kill this.

// and it is guaranteed to be the work-in-progress version.

// and it represents a batch of work. Could make a helper function instead,

// and it simplifies other profiler code (including DevTools).

// and last so that it's non-circular.

// and nobody should be using this in existing code.

// and one of its descendants throws while unmounting a passive effect.

// and prepare a fresh one. Otherwise we'll continue where we left off.

// and replace it on the stack later when invalidating the context.

// and should be reset before starting a new render.

// and switch to a different tree. Like a try/catch block. So we have to track

// and the same name are rendered into the same form (same as #1939).

// and there for cut off earlier. So we should find the root most frame in

// and treat reading from the source as we do in the mount case.

// and values needed to control behavior (forwarded refs, alternate context instances).

// and we won't require Trusted Type here.

// and when the current render (with the new getSnapshot function) is processed.

// and with only the default shallow comparison, we upgrade it

// and won't include inputs that use the HTML5 `form=` attribute. Since

// another level, but there's still an inner boundary that would show a fallback,

// any necessary setup in a predictable way. This predictability

// any references to cancelBubble throw "Member not found".  A

// anything before them are not considered for collapsing.

// anywhere in the tree. This effectively throttles progressive loading into a

// appears to fire in all of the remaining cases so we catch those and

// are no interleaved events.

// are suspended.

// are the same, the old child is unmounted and a new child is created.

// argument that corresponds to a known catch block.

// aria-* attributes should be lowercase; suggest the lowercase version.

// around this limitation, we use an opaque type that can only be obtained by

// array based heap, only the first one.)

// as a public API.

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// as an error.

// as appropriate.

// as before. We can fast bail out.

// as the deepest instance.

// as the newProps. The updatePayload will contain the real change in

// ascending numbers so we can compare them like numbers. They start at 90 to

// assigning it a key.

// assignment should always work unless something is misconfigured. Just

// assignment step above.

// assume that the child is current. This happens when we bailout on low

// assuming that after the first child we've already added everything.

// async functions in terms of async generators, it is especially

// at the beginning of the render phase and there's no re-entrancy.

// at the next level instead of this one, because the child props

// attach another listener to flip the boundary back to its normal state.

// attached to each React Root and React Portal Root. Together,

// attempt, we'll give up and commit the resulting tree.

// attempts to re-render the boundary in the primary (pre-timeout) state.

// attempts to render the main content and only render fallbacks.

// attribute are assigned at the same time using defaultChecked. This uses:

// attributeName

// attributeNamespace

// attributes on `select`s needs to be added before `option`s are inserted.

// available until after the component has mounted.

// available, otherwise a store update may happen between render and the effect,

// avoid clashing with Scheduler's priorities.

// avoid doing another reconciliation.

// avoids allocating another HostText fiber and traversing it.

// avoids inaccurate Profiler durations in the case of a

// back here again.

// bailout. Most of the time, when people add non-React children to

// bails out of the update without touching the DOM.

// base state.

// based on https://github.com/styled-components/styled-components/blob/fcf6f3804c57a14dd7984dfab7bc06ee2edca044/src/utils/error.js

// batch. This enables them to be grouped later.

// be a pure function, so that it always returns the same lane for given inputs.

// be core the to event system. This would potentially allow

// be fired.

// be necessary but unfortunately many code paths reads from the workInProgress

// be pure function, so that it always returns the same lane for given inputs.

// be scheduled. Use a counter to prevent infinite loops.

// be successfully parsed from HTML, but will produce a mismatch

// because a MemoComponent fiber does not have hooks or an update queue;

// because in an ideal world we would not emulate and use

// because it's guaranteed to have already run when movementX

// because that won't throw in a non-strict mode function.

// because the root is not part of its own effect list.

// because there is no update we can add for useReducer hooks that won't trigger an error.

// because there's no ancestor that can handle it; the root is

// because these events do not consistently bubble in the DOM.

// because they're only guaranteed to be resolved here.

// because we assume its namespaced name is the same as our config.

// because we bailout on the primary tree completely and leave it in its old

// because we used to do it during top-level native bubble handlers

// because you think you might want to restart before committing. However,

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// before ANY passive effect create functions are called.

// before the next rerender (including event handlers attached to ancestor

// before the second keystroke). Other input methods (e.g., paste) seem to

// begin phase by the time we start processing the queue, so we've already

// behavior as without this statement except with a better message.

// being called "element".

// being worked on.

// belong to the child set of A.return, and B must belong to the child

// bitmap value, we remove the secondary effects from the effect tag and

// blank-text buttons.

// blue case

// bookkeeping for it. Not sure if we need to clear it when the listener is

// boolean, undefined, etc.

// booleans, but can also accept a string value.

// bother waiting until the root is complete.

// bottom->up. Top->down is faster in IE11.

// boundary or suspense list.

// boundary's children. This involves some custom reconcilation logic. Two

// boundary.

// breaks IE9: https://github.com/facebook/react/issues/13610

// browsers for all cases.

// browsers typically do this as necessary, jsdom doesn't.

// browsers. It adds spaces and sorts the properties in some

// but

// but I won't :)

// but at commit. Therefore we need to track insertions which the normal

// but instead we rely on them being set during last render.

// but it triggers a bug in IE11 and Edge 14/15.

// but it's better then a hard failure

// but it's possible that we only have its inner render function in the map.

// but matters for <fbt>).

// but meh this is fine for now.

// but no stateful hooks have been used.

// but now we use different bubble and capture handlers.

// but that sometimes behaves strangely in IE8. We could also try using

// but there's nothing we can do about that (short of throwing here and refusing to continue the render).

// but this hook recreates the queue in certain cases  to avoid updates from stale sources.

// but using the iterator instead.

// but we can still call the log-only boundary so the error isn't swallowed.

// but with the extra DEV validation to ensure hooks ordering hasn't changed.

// by calls to these methods by a Babel plugin.

// by the native compositionend event may be incorrect. Japanese ideographic

// call anyway. We also want to call componentWillUnmount on all

// call invoke immediately, without waiting on a callback to fire,

// call the user-provided callback.

// calls are equivalent because they wrap the same Foo function.

// can be used for comparison.

// can't forsee right now.

// cannot be called outside the render phase.

// capture values if possible.

// case. We won't handle it as a reified child. We will instead handle

// cases are invalid.

// catch any error that may otherwise arise. See

// caught by a nested boundary. If not, it should bubble through.

// chance to clean up.

// changed

// changed since we began.

// changed.

// chars. Paste events should not lead to BeforeInput events.

// child. The nested children have already appended themselves.

// children and the parent.

// children to find all the terminal nodes.

// clear this in flushPassiveEffects.

// clone, or a work-in-progress hook from a previous render pass that we can

// code path that might call `prepareFreshStack`.

// code we must have exited earlier.

// color would be parsed converted to rgb values and converted back to hsl.

// commit phase. Consider removing the type check.

// commit-phase we mark this as such.

// commitRoot never returns a continuation; it always finishes synchronously.

// committed.

// committed. Disconnect the alternate pointers.

// committed. If it's sync, we still want to yield so that it can be

// commonly used development environments.

// completed class component. For example, we should not call

// completed work in order to do it.

// completed, even though it's in an inconsistent state.

// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this

// component (i.e. when processing the update queue). But since since

// component's mount, ignore it for now (that is, treat it as if it was an

// component, throw an error. If Fiber return types are disabled,

// componentWillUnmount if it is deleted.

// componentWillUnmount, but before the layout phase, so that the finished

// components don't work properly in conjunction with event bubbling because

// composites before this host node is removed from the tree. Therefore

// compositionevent, otherwise extract it at fallback events.

// concurrent tree, in an inconsistent state. We want to treat it like

// concurrently. If the whole tree is rendered synchronously, then there

// connected descendants won't update until after this component is done

// connected to the store via props shouldn't use subscription from context, or vice versa.

// consistent train of commits. This also gives us an opportunity to restart to

// contains hooks.

// contains the DOM rendered by the server.

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// continue to propagate through the React fiber tree to find other

// corresponding changes there.

// could alter all these plugins to work in such ways, but

// could be problematic, if we're not inside `Scheduler.runWithPriority`,

// createConnect with default args builds the 'official' connect behavior. Calling it with

// ctrlKey && altKey is equivalent to AltGr, and is not a command.

// current iteration.

// current reducer, we can use the eagerly computed state.

// current, that means that we reused the fiber. We need to delete

// currentParentIsValid.

// cut off due to maximum stack limits. In this case, one maybe cut off

// cycle. This means there's always time remaining at the beginning of

// data types for reserved props

// dealt with the props. Context in components that specify

// deep we are and only break out when we're back on top.

// default value provided by the browser. See: #12872

// default, slow path: scan the child sets of each parent alternate to see

// defaultValue property -- do we need this?

// define __esModule on exports

// define getter functions for harmony exports

// defined.

// definitely won't finish. Since we have a new update, let's mark it as

// delegate iterator, or by modifying context.method and context.arg,

// deleting text, so we ignore its input events.

// deletion, so don't let them throw. Host-originating errors should

// deletions from hidden tree. In Concurrent Mode, it's much simpler,

// deletions, so we can just append the deletion to the list. The remaining

// dependency list.

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// difference in the experience. However, waiting for longer might mean that we can avoid

// different from the current state.

// different layout, where the child points to a dehydrated fragment, which

// different options opens up some testing and extensibility scenarios

// directly represent `beforeInput`. The IE `textinput` event is not as

// disabled with `removeAttribute`. We have special logic for handling this.

// discard server response and fall back to client side render.

// discrete update per root so we can flush them early, if needed.

// discrete, even inside a discrete event.

// dispatch our fake event using `dispatchEvent`. Inside the handler, we

// dispatched event, so that the debugger will treat it as an uncaught

// dispatching them after the mount.

// do for gDSFP. I can't remember why.

// do in Concurrent Mode.

// do is to check its .name property.

// do not delay if we're inside an act() scope

// do the portal feature.

// document. Let's just use the local `querySelectorAll` to ensure we don't

// does to implement the `autoFocus` attribute on the client). But

// doesn't expect a non-string/function type and can throw confusing errors.

// doesn't fire when text is deleted, but conveniently, selectionchange

// doesn't give us keycodes, so we need to ignore it.

// doesn't matter since that means that the other boundaries that

// doesn't matter which bit is selected; you can pick any bit without

// doesn't, we manually listen for the events and so we have to enqueue and

// don't hoist over string (html) components

// don't natively support it.

// don't want this event dispatched twice through the event system.

// double values will cause Fibers to end up having separate shapes.

// during componentDidUpdate we pass the "current" props.

// during validateProps() which runs for hydration too.

// e.g. a destroy function in one component may unintentionally override a ref

// e.g. it might try to read from a part of the store that no longer exists.

// e.g. retrying a Suspense boundary isn't an update, but it does schedule work

// earlier than the other. We assume that the sample is longer or the same

// effect even though we're bailing out, so that cWU/cDU are called.

// effect of all current children being unmounted; even if the type and key

// effect of interrupting the current render and switching to the update.

// effect of interrupting the current work-in-progress.

// effects aren't added until the complete phase. Once we implement

// element can scroll.

// elements (not just inputs). Now that ReactDOMInput assigns to the

// elements instead of directly on the input). Without this, controlled

// empty, and we know we can safely read.

// empty, we need to schedule the text content to be reset.

// emulation (EnterLeave) or use state localized to that

// encapsulates the subscription logic for connecting a component to the redux store, as

// enqueue has not been called before, then it is important to

// ensure latest selected state is reused so that a custom equality function can result in identical references

// ensure that new initial loading states can commit as soon as possible.

// entanglement is usually "best effort": we'll try our best to render the

// equal for testing purposes and therefore we hide it from enumeration.

// equivalent to this check.

// error See ReactErrorUtils for more information.

// error boundaries.

// error can be observed.

// erroring and the code that follows the `dispatchEvent` call below. If

// errors, it will trigger our global error handler.

// errors: https://github.com/facebookincubator/create-react-app/issues/3482

// errs on the side of fewer warnings

// eslint-disable-line

// eslint-disable-line no-empty

// eslint-disable-line no-new

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-redeclare

// eslint-disable-next-line

// eslint-disable-next-line no-fallthrough

// eslint-disable-next-line no-redeclare

// eslint-disable-next-line no-unreachable

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line prefer-rest-params

// eslint-disable-next-line react-internal/no-production-logging

// eslint-disable-next-line-no-fallthrough

// eslint-disable-next-lined no-fallthrough

// even if the work is suspended.

// even listeners these nodes might be wired up to.

// event exists. So we wouldn't see it and dispatch it.

// event loop context, it does not interrupt the normal program flow.

// event on a non-React tree). We might also consider queueing events and

// event time. The next update will compute a new event time.

// event's native "bubble" phase, which means that we're

// event, then we can't dispatch it regardless of its target, since they

// event. Then reset the cached values once we can be sure the event is over.

// events fire on. That means we can skip this step, as event

// events from the nonDelegatedEvents list. Then we can remove

// events to their parent. We could also go through parentNode on the

// ever the previously attempted to render - not the "current". However,

// everyone, because the strict mode case will no longer be relevant

// everything is batched by default. We'll then have a similar API to opt-out of

// exceed it.

// exceeds the limit, we'll fire a warning.

// exception, let the outer generator proceed normally. If

// exception.

// execute code before the first await. Since we implement simple

// executor callback, and why async functions synchronously

// exiting a task.

// expected

// expiration time are props and context. We're already in the middle of the

// expired so we know to work on those next.

// expose properties, triggering a "Permission denied error" if any of its

// extra objects for things that are never updated. It also allow us to

// fail the render phase where it didn't fail before. So we log it.

// fails when pasting 100+ items)

// fallback children.

// fallback state, counts as the whole row being in a fallback state.

// fallback to a naive implementation.

// fallback. Otherwise, don't capture and bubble to the next boundary.

// falls through

// falsy value can't be a Symbol

// fiber associated with it.

// fiber. If beginWork throws, we'll use this to reset the state.

// fibers and continue.

// fibers. We assume that return pointers never criss-cross, so A must

// field after effects, see: detachFiberAfterEffects.

// filter it out using the allowed property list during the commit.

// final amounts. This seems counterintuitive, since we're intentionally

// find that inner container before moving on to finding the parent

// finishing. If there are too many, it indicates an infinite update loop.

// fire selectionchange normally.

// fire. The workaround for this bug involves attaching an empty click

// fires if there is an `Update` effect scheduled during mounting.

// fires only on input and textarea thus if there's no focused element we

// fixed, the key warnings will appear.)

// flow doesn't do during mount. This doesn't happen at the root because

// flush synchronous work at the end, to avoid factoring hazards like this.

// for each null value. However, we also don't want to call updateSlot

// for that fake event. If the callback throws, the error is "captured" using

// for the error message.

// for the event.

// for warnings.

// forcing another re-render, which we don't want.

// fork the function.

// formulae from https://en.wikipedia.org/wiki/HSL_and_HSV

// forward the event if the value has changed

// fragment nodes. Recursion happens at the normal flow.

// frame that called our sample function and the control.

// frames added by the construct call.

// from being lost during SSR hydration.

// from its placeholder state to its primary/resolved state.

// from the effect tag.

// from the original lanes.

// fully completes before restoring state.

// function, symbol are assigned as empty strings

// function.sent implementation.

// functions and classes

// functions in invokeGuardedCallback, and the production version of

// get GC:ed but we don't know which for sure which parent is the current

// get `true` twice. That's probably fine?

// get attached.

// get it started back up to attempt the next item. While in terms of

// get lost if this row ends up dropped during a second pass.

// get reset if `textContent` is mutated.  We could add a check in setTextContent

// get the case where the capture phase event might change

// get to the completed state slightly earlier.

// getDefaultExport function for compatibility with non-harmony modules

// getHighestPriorityLane because it requires the fewest operations.

// getModifierState. If getModifierState is not supported, we map it to a set of

// getSnapshotBeforeUpdate is called.

// gets it and catching keydown lets us fire an event for the first

// goes through Scheduler.

// going to wait for all of them anyway, it doesn't really matter

// hacks to make that not totally break. Like transferring effects and

// had one; that is, all the effects in the tree including the root.

// handle the fallback state.

// handleChange() below needs to reference the dispatch function without re-subscribing,

// handled by `completeUnitOfWork` or `unwindWork`, but since we're

// handlers can run. See https://github.com/facebook/react/issues/708.

// happen after `updateDOMProperties`. Otherwise HTML5 input validations

// happens when a Suspense component is hidden. An extra fragment fiber

// has a stable shape and so hopefully should be cheap to allocate.

// has ever gone from having children to deleting them or vice versa

// has no siblings nor a parent, we set it to null. Usually this is

// have been (and was previously) designed to take a closure to be

// have had an internalInstanceKey on it.

// have newProps so we'll have to reuse them.

// have not changed. Which is fine.

// have one on the alternate so we need to check in case this was a

// have set the values to before during the first pass. Ideally this wouldn't

// helpful for us so just check activeElement instead.

// heuristic to decide which lanes to attempt to render, and in which batches.

// higher priority.

// holds an emoji character like `\uD83D\uDE0A`.  Because its length

// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

// host node but that wouldn't work for React Native and doesn't let us

// how <noscript> is being handled. So we use the same document.

// http://fb.me/prop-types-in-prod

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://bugs.chromium.org/p/v8/issues/detail?id=8538

// https://bugzilla.mozilla.org/show_bug.cgi?id=208427

// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://github.com/facebook/react/issues/11768

// https://github.com/facebook/react/issues/11918

// https://github.com/facebook/react/issues/12502

// https://github.com/facebook/react/issues/12506

// https://github.com/facebook/react/issues/13188

// https://github.com/facebook/react/issues/14365

// https://github.com/facebook/react/issues/16585

// https://github.com/facebook/react/issues/16734

// https://github.com/facebook/react/issues/19099

// https://github.com/facebook/react/issues/19651

// https://github.com/facebook/react/issues/3877

// https://github.com/facebook/react/issues/7253

// https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl

// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

// https://infra.spec.whatwg.org/#ascii-tab-or-newline

// https://infra.spec.whatwg.org/#c0-control-or-space

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// https://url.spec.whatwg.org/#url-parsing

// https://v8.dev/blog/elements-kinds#avoid-creating-holes

// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts

// https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html

// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream

// hydrated it yet. Even though we leave the comments in the

// hydration parent is the parent host component of this host text.

// identities match.

// if I do. eslint-disable-next-line no-fallthrough

// if a Content Security Policy forbids using Function, but in that case

// if a component just imports ReactDOM (e.g. for findDOMNode).

// if children contains a non-element object. We should try to avoid that.

// if it's pinged, assume it's CPU-bound. Compute a new expiration time

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// if shouldComponentUpdate returns false.

// if someone has already defined a value or Safari, then bail

// if that one is still mounted.

// if the component re-renders for a different reason and by that

// if the currently rendering lanes are inclusive of the pending mutation

// if the previous render was null (so the the container would already be empty).

// if there is no tracker at this point it's unlikely

// if we ever do those wrong, this throw will surface the error in our tests.

// if we only use three arrays to process all the categories of

// if we're a child of a dehydrated container, we need to first

// iframe.contentDocument.defaultView;

// ignore it because `didError` will be false, as described above.

// ignores it.

// immediately after.

// immediately flush them.

// immediately, wait for more data to arrive.

// implementation using setTimeout.

// implementations of a working draft specification.

// implemented in any major browser. Only KeyPress has charCode.

// important to get this right, even though it requires care.

// in DEV mode if this property exists or not and warn if it does not.

// in a batch that does not also include the other lane. Typically we do this

// in case runtime.js accidentally runs in strict mode, we can escape

// in case the event system needs to trace it.

// in case they schedule additional work.

// in every case, so we don't have to touch the arguments object. The

// in fallback state. Then we render each row in the tail one-by-one.

// in our config atm.

// in that browser completely in favor of doing all that work.

// in the "together" mode, so we can continue from the state we had.

// in the bubble phase, so we need to accumulate two

// in the concurrent tree already suspended during this render.

// in the legacy event system, except the big difference between

// in the meantime, we can add/remove/change items and dependencies.

// in the stack.

// in this optimized path, mostly pushing stuff onto the stack.

// in-progress render.

// include every environment we run tests in), so the test framework

// include the fallback deletion effect.

// included in the current render. Usually, the priority level of the

// including any interleaving updates that occur.

// indicate that it still has pending work.

// infinite loop, because it iterates over the newly added props too.

// inherited deeply down the subtree. The upper bits only affect

// initial commit.

// initial value. In IE10/IE11 there is a bug where the placeholder attribute

// injected easily by `bin/regenerator --include-runtime script.js`.

// inserted into the React tree here. It just happens to not need DOM

// inserted, before any life-cycles like componentDidMount gets called.

// inserted.

// inside a blocking mode tree. If the Suspense is outside of it, we

// inside a non-concurrent tree, in an inconsistent state. We want to

// instance. Note that we don't check this field on  the targetNode

// instead of tuples.

// instead.

// intentionally not calling those, we need set it here.

// intermediate loading state. So we use heuristics to determine when.

// internal queue

// interrupt deletion, so it's okay

// into the async generator function so it can be handled there.

// invalidates the heuristics of the event plugin. We

// invariant for a missing parent, which is super confusing.

// invocations of the iterator.

// invokeGuardedCallback uses a try-catch, all user exceptions are treated

// invoked without arguments, but in all the cases we care about we

// is 2, the property `which` does not represent an emoji correctly.

// is a new ref we mark this as an update. All the work is done in commitWork.

// is changed from JS so we redefine a setter for `.value` that updates

// is created synchronously, otherwise a store update may occur before the

// is currently timed out, too.

// is inserted in between the Suspense fiber and its children. Skip

// is not resilient to the DOM state changing so we don't do that here.

// is often used for testing purposes.

// is re-rendered, the selectors are called again, and

// is to access a property that typically works for non-anonymous divs and

// is to tell small differences in time. Therefore, the longer we've already waited,

// is why the Promise constructor synchronously invokes its

// isBackwards

// it and we'll lose our progress. We should only do this if the new lanes are

// it at the keypress level and bail immediately. Android Chrome

// it behind on this node.

// it cannot be shared with the current fiber.

// it causes problems. This is meant to give a nicer error message for

// it doesn't make sense to restart only while in the period we're suspended.

// it from the child list so that we don't add it to the deletion

// it is possible that no option is selected.

// it would have deleted the dehydrated boundary nested inside already.

// it would pause the execution at this line.

// it's already rendering, we won't interrupt it. This is intentional, since

// it's not part of the same transition once the transition has

// it's not practical to try every single possible combination. We need a

// it's sync, we still want to yield so that it can be painted.

// it, on the update object. If the reducer hasn't changed by the

// it, so set the completion value of the entire function to

// it. If it has no children, this is still the first loop, and the only

// it. Using NoLane works because 0 is a subset of all bitmasks, so

// iterator prototype chain incorrectly implement this, causing the Generator

// its thennables. Instead, we'll transfer its thennables to the

// itself because the fibers are conceptually between the container

// itself should capture it.

// itself will be GC:ed when the parent updates the next time.

// itself. They will be added to the side-effect list as we pass through the

// just useEffect instead to avoid the warning, since neither will run anyway.

// keep track of whether it suspended or not.

// key, when multiple keydown events are fired but only one keyup is.

// keys multiple times.

// keys quickly. Implicit (null) keys get added to this set with their index

// keystroke if user does a key repeat (it'll be a little delayed: right

// keyup, but we check on keydown as well in the case of holding down a

// lane in the transition range.

// lanes in the same batch, but it's not worth throwing out partially

// lanes is a superset of the lanes we started rendering with.

// lanes, since that guarantees that the value we're about to read from

// last

// last error event is always used. If the callback actually does error,

// last rendered item.

// last sibling.

// later and not trigger anything as the state now

// layout effects, and so on.

// layout, but class component lifecycles also fire here for legacy reasons.

// lazily which won't cover if the log function was extracted eagerly.

// left in the tail. We'll just give up further attempts to render

// libraries need to call batchedUpdates. Eventually, this API will go away when

// like a proxy to Context. This proxy object adds unnecessary code in PROD

// like caught exceptions, and the DevTools won't pause unless the developer

// likely unblocked. Try rendering again, at a new expiration time.

// line, that's a pretty good indicator that our sample threw at same line as

// list itself.

// list of the parent. The completion order of the children affects the

// list.

// list. PerformedWork effect is read by React DevTools but shouldn't be

// listener has already been added previously. However, we

// listener on the target node.

// listeners still fire for all the media events.

// listeners still fire for error and load events.

// listeners still fire for the error event.

// listeners still fire for the invalid event.

// listeners still fire for the load event.

// listeners still fire for the toggle event.

// listeners.

// lists and take advantage of structural sharing.

// live outside of this function.

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// lol @ IE not supporting String#repeat

// lower priority work to do. Instead of committing the fallback

// main reasons this is so complicated.

// make sure rgb are contained in a set of [0, 255]

// makes sense elsewhere

// maybe we want to continue warning if they don't exist, to preserve the

// means `flushPassiveEffects` will sometimes result in additional

// meant to be awaited.

// member of intersection type." Whyyyyyy.

// memoized props/state to indicate that this work can be reused.

// memoized state to indicate that this work can be reused.

// method always terminates the yield* loop.

// might be flawed or unnecessary.

// might match additional HTML that is hidden when we read it using

// might unsuspend it, and vice versa. The only reason to suspend is

// minifier not to mangle the names of these two functions.

// miss anything.

// missed a blur event somehow.

// mixing React radio buttons with non-React ones.

// modifier keys exposed by the event. In this case, Lock-keys are not supported.

// mounted but this is a new fiber.

// mounted fiber is the parent but we need to continue to figure out

// move this assignment out of the common path and into each branch.

// moved from outside the window (no target) onto the target once it hydrates.

// mustUseProperty

// mutated. We have already warned for this in the past.

// mutations because it already exists.

// mutations that haven't been synchronized yet.

// name warnings.

// need an additional field on the work in progress.

// need to delete the existing child.

// need to dispatch in order.

// need to validate that the fiber is a host instance, otherwise

// nested `invokeGuardedCallback` calls do not clash. Otherwise, a

// nested call would trigger the fake event handlers of any call higher

// nested within a dehydrated boundary and if so, which one.

// never be thrown again.

// never bubble through the *DOM* tree unless an ancestor with onclick

// never changes.

// new markup in a temp node and then move the child nodes across into

// new. If a row has multiple Suspense boundaries, any of them being in the

// next state before entering the render phase. If the new state is the

// nextEffect pointers to assist with GC. If we have passive effects, we'll

// no module.id needed

// no module.loaded needed

// no more pending effects.

// node and the first child. It isn't surrounding the container node.

// node from the tree.

// node has fully mounted yet, and for scheduling event replaying.

// node that is from the other tree.

// node that we're free to reuse. This is lazily created to avoid allocating

// node.

// node. Unfortunately, if multiple insertions are done in a row we have to

// non-alphabetical order. Handling that would require sorting CSS

// non-interactive elements, which means delegated click listeners do not

// non-printable. One would expect Tab to be as well (but it isn't).

// nonDelegatedEvents list in DOMPluginEventSystem.

// nor polyfill, then a plain number is used for performance.

// normal children even if their identities match.

// normalized. Since it only affects IE, we're skipping style warnings

// normally do.

// not as a fragment. Nested arrays on the other hand will be treated as

// not defined.

// not have a clone, that means it wasn't processed, and the updates were

// not in the capture phase. That's because we emulate

// not measuring part of the render phase, but this makes it match what we

// not part of the same transition once the transition has committed. If

// notch on the scroll is always +/- 120, roughly equivalent to pixels.

// nothing should rely on this, but relying on it here means that we don't

// now unblocked. This first might not actually be unblocked yet.

// null and keep rendering. In the commit phase, we'll schedule a

// number

// object and shouldComponentUpdate will always return true.

// object to not be returned from this call. This ensures that doesn't happen.

// objects. For full spec compliance, you may wish to configure your

// obnoxiously named function :)

// of DevTools integration and associated warnings and logs.

// of priority this work has the same priority as this current render,

// of the effect list for each phase: all mutation effects come before all

// of the existing task is the same as the priority of the next level that the

// of the polyfill.

// of the preceding one.

// of this function.

// ok not to if the visible content is still enough to indicate what

// on a fiber.

// on any nested boundaries to let them know to try to render

// on it

// on the client side because the browsers are inconsistent. Instead we call focus().

// on the root.

// on the same list as effects. We want to keep the effects from the primary

// one below.

// one does not already exist for the lanes we're currently rendering (which

// one so we'll settle for GC:ing the subtree of this child. This child

// only additional allocation required is the completion record, which

// only codepath.)

// only ever need at most two versions of a tree. We pool the "other" unused

// opportunity later. So we mark this render as having a ping.

// opportunity to paint.

// option and select we don't quite do the same thing and select

// option to rely on it in the future?

// options object:

// or a finally block) gives us a place to store values thrown from

// or boolean value assignment. Regular attributes that just accept strings

// or completeWork depending on whether we want to add them top->down or

// or not, return the runtime object so that we can declare the variable

// or, if something suspended, wait to commit it after a timeout.

// order may not be the same as the new order. We use the new order.

// order.

// other

// other events and have it go through ReactBrowserEventEmitter. Since it

// other nodes in them. We also ignore components with pure text content in

// otherwise it won't capture incoming events that are only

// otherwise we won't suspend.

// our activeElementValue variable, allowing us to ignore those changes

// ourselves to this constraint, though. If the behavior diverges, we should

// out known bad ones like `onclick`. We can't suggest a specific replacement though.

// outer generator.

// over and traverse parent path again, this time treating the exception

// over this extra fragment fiber and proceed to the next parent.

// overwritten while composition continues.

// painted. Conceptually, this is really the same as pinging.

// parent boundary that hasn't above this one so we need to find

// parent re-rendered without this component and we're about to unmount.

// parse color string to rgb

// parsing rules -- if we're down here, then none of those matched and

// part of the second pass. In that case nothing will subscribe to

// pass entirely and go straight to rendering the fallback. (In Concurrent

// pass host context to this method?

// pass null in place of where we usually pass the current child set. This has

// pass the Container node as the targetNode, you will not actually get the

// pass through beginWork to rerender all children (including the tail) with

// pass to any Profiler onRender() hooks. This also provides DevTools with a

// passed inline.

// passed through to selectorFactory

// passing null.

// passing the value through getToStringValue first.

// passive by default on document. React doesn't bind them

// passive effects. So we need to keep flushing in a loop until there are

// path from the normal path. I'm tempted to do a labeled break here

// path to compute the correct tail.

// pending level.

// pending time is whatever is left on the root fiber.

// pending updates to the end of the list and keep processing.

// pending work.

// phase event listeners (via emulation).

// phase event listeners.

// phase introduces a potential mistake where we suspend lanes that were

// phase, which we are now aborting. Remove the updates from the queues so

// phase. They should be discarded if the render is aborted. Therefore,

// physical keyboard key.

// pinged or updated while we were rendering.

// placeholder and without scheduling a timeout. Delay indefinitely

// placement for inserting new children.

// please ensure we do the following:

// plugin (BeforeInput, Change, Select). The state in

// plugin. However, the plugins below either expect

// possible for anything else to have happened in between our callback

// post mount to force it to diverge from attributes. However, for

// prefix operator or function

// prettier-ignore

// prevent a bail out.

// previously was rendered in its fallback state. One of the promises that

// primary children. In mutation mode, we also need the flag to

// primary tree will commit in an inconsistent state, so when we do the

// printable characters (normalized to `Unidentified`), ignore it.

// priority as an argument to that function and this one.

// priority for this boundary.

// priority this work has the same priority as this current render, it's

// priority without also including the lower priority updates. This works well

// priority. Bailout.

// priority: the bailed out fiber's child reuses the current child.

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// problems, please detail your unique predicament in a GitHub issue.

// process the abstract event manually.

// process them now.

// processUpdateQueue, but that didn't happen in this case because we

// profiler durations.

// properties are accessed. The only seemingly possible way to avoid erroring

// properties in the client & server versions or applying

// properties:

// property, it may be the creator of the child that's responsible for

// propertychange on the first input event after setting `value` from a

// props have not changed. If false, the selector will always return a new

// props.

// provides a surprisingly accurate mapping for US and European users.

// pushHostContext() only pushes Fibers that provide unique contexts.

// queue -> linked list of updates. After this render pass, we'll restart

// queue is a singly-linked list with no cycles, we can append to both

// queueing is accummulative.

// raise warnings and prevent the new value from being assigned.

// rare, but as a last resort, pick a default lane. This will have

// rarely, since we try to avoid it) updated during the render phase.

// rather than attributes. These are all booleans.

// rather, it wraps around an inner component, which may or may not

// re-initializing custom elements if they exist. But this breaks

// re-render a fallback. This is temporary until we migrate everyone to

// react-dom is used with production (non-profiling) bundle of

// recent event, and we assume time is monotonically increasing.

// recent mutation.

// reclaim the extra memory if needed.

// reconciliation

// record like context.tryEntries[i].completion. This interface could

// recreated.

// reduce size and overhead. The separate object references context via

// reducer returns their initial state. This effectively populates

// regeneratorRuntime in the outer scope, which allows this module to be

// register it to the root container. Otherwise, we should

// register the event to the target element and mark it as

// remain on that fallback regardless of whether the content has resolved.

// remaining updates is accumlated during the evaluation of the

// remove from the queue because you can't remove arbitrary nodes from an

// removeChild on the inner nodes because they're removed by the top

// removed.

// render and there's another warning for that anyway.

// render pass will run to completion or restart or "suspend" the commit.

// render phase update. It assumes there is either a current hook we can

// renderLanes from the original lanes.

// renderer.

// rendering it again.

// rendering it before rendering the rest of the expired work.

// rendering the fallback children.

// rendering. We might want to restart this render. This should mirror

// replaying on render function. This currently only patches the object

// report Enter as charCode 10 when ctrl is pressed.

// rerender the children.

// result in far fewer object allocations and property accesses

// result, either by returning a { value, done } result from the

// resulting list is the set that would belong to the root's parent, if it

// resuming, this may not be true.

// retries so that we don't show too many loading states too quickly.

// retry any lane at equal or lower priority, but don't try updates at higher

// retry listener to the promise. This flag is also used to hide the

// revealOrder undefined can't be trusted because it don't

// root boundaries that match that of our current "rootContainer".

// root has work on. This function is called on every update, and right before

// root inside of batchedUpdates should be synchronous, but layout updates

// root.

// root; if a task was already scheduled, we'll check to make sure the priority

// row at the tail. So we'll keep on and cut off the rest.

// same as the current state, we may be able to bail out entirely.

// same children then we're still in progressive loading state.

// same error.

// same event, like if you perform an update inside `flushSync`. Or any other

// same fiber again.

// sanitizeURL

// satisfies our requirement. Our requirement is not to produce perfect

// schedule a callback until after flushing layout work.

// schedule a side-effect to do the updates.

// scheduleCallbackForFiber to preserve the ability to schedule a callback

// scheduled before we entered the render phase.

// scheduled work and instead do synchronous work.

// scheduler/tracing

// scraping the MDN documentation.

// script and fires only keydown, keypress, keyup. Catching keyup usually

// search past them. This leads to exponential search for the next sibling.

// second pass to render the fallback, we do some exceedingly, uh, clever

// selection (this matches native `select` event behavior). In HTML5, select

// selectionchange needs to be attached to the document

// self and source are DEV only properties.

// semantics of the native select event.

// separate issue. Write a regression test using string refs.

// set of B.return.

// set them on the actual target element itself. This is primarily

// set to true and it does not execute

// setting context.delegate to null, and returning the ContinueSentinel.

// setting it the first time we go from not suspended to suspended.

// should *not* suspend the commit.

// should be deferred until the end of the batch.

// should be invisible. If there are already mounted boundaries

// should clear the child pointer of the parent alternate to let this

// should immediately commit it or wait a bit.

// should probably be inlined somewhere and have its logic

// shouldComponentUpdate is tricky; but we'll have to account for

// showing an intermediate loading state. The longer we have already waited, the harder it

// showing content on the screen, as opposed to being in fallback state or

// sibling order but that isn't a strong guarantee promised by React.

// sibling, or the parent if there are no siblings. But since the root

// sibling. If there are no more siblings, return to the parent fiber.

// siblings.

// side of them.

// side-effect order.

// since in the common case of a single root app it probably is. If it's not

// since it's known to be in an inconsistent state. Use a force update to

// since the rest will all be insertions.

// since we're leaving it behind on this node.

// skipped over the parent when we bailed out.

// skipped update, the previous update/state is the new base

// so let's just skip over it to find memo() outer wrapper.

// so that e.g. DevTools can display custom hook values.

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// so that we don't prematurely signal complete for interactions when there's e.g. hidden work.

// so the stack is accurate.

// so we allow it only if we don't know what the parent is, as all other

// so we assign defaultValue to the same thing as the value property

// so we can always restart.

// so we can tell if any async act() calls try to run in parallel.

// so we have to do it now instead.

// so we use a ref to ensure that it always has the latest version.

// so we use the old behaviour (Context.Consumer references Context) to

// so we'll just enter that. The only difference is we'll bail out

// solution. The value can be a boolean or object so that's why it's forced

// some renderers as primary and others as secondary. We only expect

// sometimes bails out later in the begin phase. This indicates that we should

// sometimes when it hasn't). IE's event fires out of order with respect

// source during the current render pass, so we need to do a bit more work.

// spaces, for instance (\u3000) are not recorded correctly.

// special case the scroll event because the reality is that any

// special cases and we'll deal with them.

// special to do. Need to push to the stack regardless, though, to avoid

// state

// state of the host tree right before we mutate it. This is where

// state, no effects. Same as what we do for Offscreen (except that

// state, only for the following bubble event to come in

// state. Now that we have additional work, cancel the timeout.

// stateNode is any.

// statement, but eslint doesn't know about invariant, so it complains

// stepped past dehydrated DOM nodes to get here. However they could

// still want to warn on the client.

// stopWatching() should be a noop here but we call it just in case we

// store a single event to be replayed.

// store the version in case other components read from it.

// strict mode using a global Function call. This could conceivably fail

// style object but the events that fire will still be prefixed, so we need

// sub-tree for that root and make that our ancestor instance.

// subscribed to the source, and if so, whether there are any pending

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// subsequent synchronous update to re-render the Suspense.

// succeed and there will likely be errors in render.

// sufficient for updates within the same priority, since we want to treat

// superfluous and we'll delete it. Since we can't eagerly delete it

// support window.event.

// supports within in a single renderer. Such as parallel server rendering.

// supposed to capture all errors that weren't caught by an error

// suspend for longer if possible.

// suspend the commit. Pretend as if the suspended component rendered

// suspended it has resolved, which means at least part of the tree was

// suspended level. Ping the last suspended level to try

// suspended now, right before marking the incoming update. This has the

// suspended render.

// switch on that value.

// synchronously to block concurrent data mutations, and we'll includes

// systems is that the modern event system now has an event listener

// tags get no namespace.

// tail

// takes the extra step of enabling pause on caught exceptions. This is

// textContent. E.g. "foo" will match "f<span>oo</span>" but that still

// than once; for example, if non-React code also calls `dispatchEvent`

// that are shown on error are two different sets, so we shouldn't reuse

// that child fiber is setting, not the reconciliation.

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that could already be hydrated, we wouldn't have found them

// that has been unmounted.

// that have been unsubscribed in the  middle of the notification loop.

// that is eventually read during hydration.

// that just executes the given callback immediately.

// that might cause other unknown side-effects that we

// that plays more nicely with the browser's DevTools. The idea is to preserve

// that regardless.

// that the "current" fiber pointer gets updated so we need a commit

// that the "current" props pointer gets updated so we need a commit

// that trying again will succeed

// that was thrown. It's possible that this error handler will fire more

// that we can show the initial loading state as quickly as possible.

// that we don't block potential future ES APIs.

// that we first we try to render one tree, and if that fails, we render again

// that were previously skipped when the tree was hidden. That set of

// that weren't processed.

// the .value of the Promise<{value,done}> result for the

// the DOM node back to the controlled value. This is necessary when React

// the DOM nodes representing these roots are the "rootContainer".

// the React name like we do for attributes that exist only in HTML.

// the `possibleStandardNames` module to ensure casing and incorrect

// the actual printable character.

// the allowed property list in the commit phase instead.

// the base state unless the queue is empty.

// the begin phase. There's still some bookkeeping we that needs to be done

// the callback doesn't error, but the error event was fired, we know to

// the capture phase here still. This is a trade-off,

// the commit side-effects on the root.

// the component is rerendered and the value reverted before all the event

// the control. I.e. before we entered the sample frame. So we ignore this result.

// the developer's perspective, the error is uncaught.

// the different event systems have different DOM event listeners.

// the dispatcher used for mounts.

// the earliest expiration time on the root. Then use that to quickly bail out

// the earliest opportunity.

// the effect of interrupting the current work-in-progress render.

// the effect of remounting all children regardless of whether their

// the error. Bubble it to the next boundary.

// the event in the out event of the other target. If this is replayed,

// the existing behavior manually on the roots now.

// the existing children. Conceptually, the normal children and the children

// the fact that we have it is the same as the expected.

// the final result produced by the iterator.

// the first ancestor. Next time, we will ignore the event.

// the first item in the list.

// the first pass, we schedule a deletion for all the current children by

// the force suspend context. If the first render didn't have anything in

// the future if we implement resuming, or some form of that.

// the host tree after it's been mutated. The idiomatic use case for this is

// the hottest path, and Object.assign() was too slow:

// the hydration is successful of a javascript: URL, we

// the initial state tree.

// the input might not even be in a form. It might not even be in the

// the list will propagate the change when it rerenders.

// the logic of whether or not a root suspends once it completes.

// the longer we can wait additionally. At some point we have to give up though.

// the main content and only render fallbacks.

// the message event.

// the method takes exactly one argument, since that happens to be true

// the middle of the notification loop, where `subscription` will then be null. This can

// the most recent event from that source.

// the mutation phase, so that the previous tree is still current during

// the new API.

// the new state tree with any relevant data from the old one.

// the newly allocated props object.

// the next discrete event.

// the next prop is different than the server value, so just return

// the next tick, or earlier if something calls `flushSyncCallbackQueue`.

// the only reason we track the event time, then probably not.

// the other plugins are essentially polyfills. So the plugin

// the outer generator.

// the outer most that is known.

// the performance wins from the change. So we emulate

// the phases properly, like we do with the SimpleEvent

// the problematic code almost always lies inside that component.

// the proper solution is to fix the accidental strict mode problem. If

// the render phase.

// the renderer. Such as when we're dispatching events or if third party

// the rest.

// the root always starts with a "current" with a null child.

// the root has an effect, we need to add it to the end of the list. The

// the same root, then it's not a huge deal, we just might batch more stuff

// the sample somewhere in the control.

// the source is consistent with the values that we read during the most

// the stack without entering the complete phase. If this is a boundary,

// the stack.

// the target fiber to a different ancestor. We had similar logic

// the target node

// the tree, it is using a ref to a child-less DOM node.

// the un-prefixed "animation" and "transition" properties are defined on the

// the unwanted keypress events. Enter is however both printable and

// the update is added to a shared queue, which outlasts the

// the update queue. However, there's an exception: SimpleMemoComponent

// the updates that were skipped. Usually we only suspend at the end of

// the validation flag non-enumerable (where possible, which should

// the whole system, dispatch the event without a target.

// the whole system.

// the work-in-progress hook.

// the wrapperState._initialValue property. This uses:

// their event listeners to the respective elements that their

// them got retried so they'll still be blocked in the same way

// them to update.

// then don't suspend/restart.

// then it needs to call setState to recover from errors.

// then it's because we couldn't dispatch against this target previously

// then let that catch block handle the exception normally.

// then the tail doesn't matter. Anything new that suspends will work

// then we suspend/restart for 500ms since the last time we showed a fallback

// then we would risk falsely saying two separate memo(Foo)

// then we'll get the priority of the current running Scheduler task,

// there are also other cases when this might happen (such as patching

// there are any.

// there may be state updates already scheduled from the old source.

// there to be two concurrent renderers at most: React Native (primary) and

// there's a new task, or that there's no remaining work on this root.

// there's pending input, always yield at the end of the frame.

// therefore not reporting its length accurately..

// these aren't boolean attributes (they are coerced to strings).

// these children are not part of the reconciliation list of children.

// these modules complicates things, as you'll essentially

// they are left as they are instead.

// they cannot handle preferred fallback states.

// they do not persist to the next render. Do not remove updates from hooks

// they fire before the next serial event.

// things simple and return the next function itself.

// this case.

// this function wraps mapToProps in a proxy function which does several things:

// this immediate suspense boundary and gets reset each new

// this in the host environment that also has access to this prop. That

// this is needed to work around a chrome bug where setting defaultChecked

// this is no longer necessary.

// this may also return a SuspenseComponent or HostRoot to indicate that.

// this point, it errored again. Commit it.

// this render is thrown away. Since it's a race condition, not sure it's

// this render.

// this special case and use the same logic for all events.

// this will never be skipped by the check above.

// those cases. Even if our error event handler fires more than once, the

// those special-case tags.

// those trigger a fallback, then don't suspend/restart. We want to ensure

// those two cases. Need to fix this before exposing flushDiscreteUpdates

// those updates as parallel.

// through Scheduler

// through in twos. The events are in pairs of two to save code

// through the React tree. However, on Mobile Safari the click would

// through this pass since if the target is hydrated it would

// throw the exception.

// thus be captured by `keypress`, no other non-printable key should.

// time the reducer has changed.

// time we apply the entanglement.

// time we enter the render phase, then the eager state can be used

// time we have to render. So rendering one more row would likely

// to a SimpleMemoComponent to allow fast path updates.

// to account for it here, too. Reset to the value of the current fiber.

// to add them to the deletion list.

// to arrive.

// to attempt to render the primary children again.

// to avoid a push/pop misalignment.

// to avoid choosing a lane that is already in the middle of rendering.

// to be a string.

// to be able to optimize each path individually by branching early. This needs

// to be removed, such as transitioning from a checkbox into a text input

// to check if the un-prefixed events are usable, and if not remove them from the map.

// to consolidate.

// to create a new function object. We can even get away with assuming

// to delete it. So we need to remove it from the list. Deletions are stored

// to determine what the child props should be

// to determine what the child props should be.

// to document anymore, but changing this now would undo

// to filter them out until we fix the logic to handle them correctly.

// to find the callsite that caused this warning to fire.

// to forget to do before returning it. E.g. for the single child case.

// to get it started back up to attempt the next item. While in terms

// to key and input events on deletion, so we discard it.

// to only set the value if/when the value differs from the node value (which would

// to render it.

// to schedule a side-effect to do the updates.

// to schedule work on. In this case we have to schedule it on the

// to see if one of its parents is a React owned DOM node.

// to see what path the root points to. On the way we may hit one of the

// to stay in place.

// to switch statement in `completeWork`.

// to the algorithm must be the same. For example, we use the `renderLanes`

// to the end. This breaks the guarantee that life-cycles fire in

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to this case. If none is defined, JND is used instead.

// to throw, e.g. if it has a cross-origin src attribute.

// to unblock.

// to update this element.

// together more than necessary.

// track of how many dependencies remain but it gets tricky because

// traversal in a later effect. See PR #16820. We now clear the sibling

// traverseAllChildren used to do for objects as children

// treat it like a new mount, even though an empty version of it already

// tree is part of a hydrating tree. This is used to determine if a child

// tree which will affect the tail. So we need to use the normal

// tree.

// tree. So we copy the primary child fragment's effect list, which does not

// tree. To do this we can use getClosestInstanceFromNode, but we

// triggered on the document directly.

// try to extract the composed characters from the fallback object.

// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake

// try-catch. Neat!

// type of the event.

// typeof check of "unknown" circumvents this issue (and is also

// unblock the surrounding content. Then immediately retry after the

// unfortunate because it triggers the slow path all the time. We need

// unified ._invoke helper method.

// unintuitive, though, because even though React has caught the error, from

// unlike current.memoizedProps which will be the unresolved ones.

// unmount all the children. componentDidCatch will schedule an update to

// unmounted.

// unravel them when transferring them to the base queue.

// until `blur` in IE8.

// until we receive more data.

// unwanted click events.

// up necessary since we never stop tracking anymore.

// up text content during hydration mismatch). So we'll check this again.

// up the fiber tree from the target instance and attempt to find

// up/down buttons on an <input type="number">. Anonymous divs do not seem to

// update in the past but didn't complete it.

// update to the current fiber, too, which means it will persist even if

// update/state.

// updates at the same priority within the same event. To do this, the inputs

// updates) to a group of lanes (used for flushing work).

// updates, and deletions. To avoid needing to add a case for every possible

// updates, to preserve historical behavior of legacy mode.

// us to ship builds of React without the polyfilled plugins below.

// use as a base. When we reach the end of the base list, we must switch to

// use make it a noop by treating it as the default revealOrder.

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// useMutableSource, we should ensure that there is no partial work at the

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// useful, so we don't use it.

// using `which`.

// using the current time.

// valid selection is anchorNode and focusNode both equal to this node

// value set by a create function in another component.

// value="" should make a value attribute (#6219)

// values.

// variable specified by delegate.resultName (see delegateYield).

// visual feedback, "flashing" outermost parent rectangles is sufficient.

// wait until the next time we yield.

// want to reconcile without matching against the existing set. This has the

// want to warn if we can't detect the priority

// warnings.

// was changed but the input saw no event or value set

// was copied.

// was part of *our* root.

// was previously checked to update will cause it to be come re-checked

// way this could possibly happen is if this was unmounted, if at all.

// way to access it when the onCommitRoot() hook is called.

// way to define them.

// we already scheduled one when we created the queue.

// we already threw above.

// we are actually fully unblocked it will be fast to replay them.

// we bail out on a parent fiber that then captures an error thrown by

// we can accurately attribute time spent working on it, And so that cascading

// we can assume that they would have prevented this update.

// we can continue to replace it without aborting even if it is not a text

// we can optimize this reconciliation pass by not tracking side-effects.

// we did find already has their listeners attached.

// we do an inner loop while we're still inside the host node.

// we haven't gotten to hydrate it yet. There might still be a

// we ignore all errors here, since when the component

// we keep track of which ones already failed during this batch.

// we know that the last error event is the correct one, because it's not

// we need to transfer the updates to that queue, too. Because the base

// we need to trap an event listener onto the target.

// we need to traverse up through the DOM till we find the correct

// we pass in the meantime. That's going to be our tail in reverse

// we read something.

// we should only put them on the work-in-progress queue, not the current one.

// we should probably never restart.

// we shouldn't set this.

// we want to report this error outside of the normal stack as a last resort.

// we were an insertion and now need to pop up reenter hydration of our

// we will add them all to the child before it gets rendered. That means

// we'd have a different number of entries on the stack depending on

// we'll have to schedule a deletion. To do that, this node needs a dummy

// we're bailing out early *without* evaluating the component, we need

// webpackBootstrap

// well as nesting subscriptions of descendant components, so that we can ensure the

// when DevTools forces us to display a fallback; we skip the first render

// when considering updates across different priority levels, but isn't

// when multiple updates have the same source, and we only want to respond to

// when the user is inputting text

// when they should be reading from current and writing to workInProgress.

// when we call document.createEvent(). However this can cause confusing

// where the parsing rules cause implicit opens or closes to be added.

// where we should count the work of multiple passes.

// whether getRootHostContext() throws somewhere in renderer code or not.

// whether mapToProps needs to be invoked when props have changed.

// which branch we're currently rendering. Ideally we would model this using

// which cannot be detected. Assuming that it is a US keyboard layout

// which child belongs to which set.

// which is probably not what we want.

// which may cause missed updates; we also must ensure the store subscription

// which ones gets to ping. In theory we could get clever and keep

// will be cased anyway with server rendering.

// will commit it even if something suspended.

// will populate textContent as well.

// will receive the previous state. This effectively populates

// will sometimes influence the value of checked (even after detachment).

// will still be current since we haven't rendered them yet. The mounted

// will throw again, if neither props nor store state

// window.event assignment in both IE <= 10 as they throw an error

// with current event handlers.

// with findDOMNode and how it requires the sibling field to carry out

// with the currentUpdateLanePriority above. As an example of how this

// with the normal suspend path.

// with the previous one.

// without calling the reducer again.

// without having to recalculate it. We will also use it in commitWork() to

// without immediately flushing it. We only do this for user-initiated

// won't dispatch.

// won't update its child set by applying minimal side-effects. Instead,

// work is current during componentDidMount/Update.

// work triggered during the render phase will be associated with it.

// work without treating it as a typical update that originates from an event;

// work-in-progress hook.

// worth fixing.

// worth it because we expect very few discrete events to queue up and once

// wrapper function to constrain it.

// yet. If it is, then it will have a pending insertion effect on it.

// you've misconfigured your bundler to force strict mode and applied a

// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.

//# sourceMappingURL=styled-components.browser.esm.js.map
